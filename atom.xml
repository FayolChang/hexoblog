<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Machine Learning, Algorithms and others]]></title>
  
  <link href="/hexoblog/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2015-05-29T05:28:32.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[Fayou Zhang]]></name>
    <email><![CDATA[zhangfayou at gmail dot com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[god]]></title>
    <link href="http://yoursite.com/2015/05/29/god/"/>
    <id>http://yoursite.com/2015/05/29/god/</id>
    <published>2015-05-29T04:51:40.000Z</published>
    <updated>2015-05-29T05:28:32.000Z</updated>
    <content type="html"><![CDATA[<p>诸神在广场上向人们兜售着他们的理念，希望得到民众追随。众人发问：在你们之中，有谁是一直爱护着人类，没有由着自己的性子，对人类施加暴行的，我们就选择他当我们的神。</p>
<p>艾瑞斯默默的走了。</p>
<p>宙斯也默默的走了。</p>
<p>耶和华也红着脸，从旁边退了出去。</p>
<p>马克思没好意思留下。</p>
<p>最后，广场上还剩下一位。</p>
<p>于是众人高呼：“RAmen”。</p>
<hr>
<p>1.RAmen,是飞天面条教祈祷结束时的，飞天面条是对宗教的新面孔—-智能设计的嘲讽。参考维基百科。</p>
<p>2.这段是看到圣经上的一个小故事（可能来自约翰福音）：当时犹太人处于罗马的统治下，犹太教的信徒（还是长老？）为了给耶稣出难题，抓住了一个行淫的女人。请教耶稣如何审判。按照罗马法律，是不可以私刑的。但是按照摩西律法，该女子是要被处以石刑。耶稣无论是按照那个律法，都必然违反另一个法律。耶稣当时好像是说，你们当中谁没有犯过错误的，尽管拿石头砸她。众人想了想，就都退去了。</p>
<p>我对这段的逻辑没法理解。尽管我不赞同石刑。但是，这和行刑的人有没有犯过错误有什么关系，难道以前犯过错误，就不能主持正义了吗。</p>
<p>PS. 我最初以为石刑是绿教的，原来犹太教就有了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>诸神在广场上向人们兜售着他们的理念，希望得到民众追随。众人发问：在你们之中，有谁是一直爱护着人类，没有由着自己的性子，对人类施加暴行的，我们就选择他当我们的神。</p>
<p>艾瑞斯默默的走了。</p>
<p>宙斯也默默的走了。</p>
<p>耶和华也红着脸，从旁边退了出去]]>
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[朋友]]></title>
    <link href="http://yoursite.com/2015/05/29/friend/"/>
    <id>http://yoursite.com/2015/05/29/friend/</id>
    <published>2015-05-29T04:14:58.000Z</published>
    <updated>2015-05-29T04:48:46.000Z</updated>
    <content type="html"><![CDATA[<p>记得以前看过一个小故事，大意是自己遇到了困难，打电话找朋友借钱帮忙，结果自己以为的有能力帮忙的几位好友全部借口推脱，反而是自己以为的关系一般的几位朋友纷纷二话不说，慷慨解囊。当他把这件事和一个生意上的朋友说的时候，那个朋友也借机打了十几个电话求帮忙。结果同样出乎意料，本来以为是好友的没有帮忙，十几个人中答应帮忙的仅有一二，而且是自己认为关系一般的朋友。于是两人得出结论：现在知道哪些人是真正的朋友了。</p>
<p>这个故事试图向我们传达：真正的朋友，就是那种在你需要帮忙的时候，慷慨解囊的人。</p>
<p>但我却觉得，该故事同时传达了：那些能被你利用的才是真正的朋友，在不能被你利用时，应该果断放弃那些没有利用价值了的朋友。而且为了试探朋友，自己采取撒谎欺骗的手段是可取的。</p>
<p>当初看到好多朋友同学纷纷转发，一直想把自己的想法写出来。<br>我自己的观点是：我对朋友的要求很低，在我遇到困难的时候，我也会向朋友寻求帮助。对于那些帮我的人，无论是物质帮助还是精神鼓励，我都很感激。对于没有帮助我的人，我也不会有怨言，我唯一的要求是不要在我陷入困境时落井下石即可。对于帮助朋友，我可能会按照自己心里的亲疏关系给予不同的帮助。但是我不会对自己能帮上忙要情要义的。对于帮不上忙的，或者有能力帮助而选择不帮的，我现在也不会有什么愧疚了。不过我可以确定的是，我不会选择落井下石。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>记得以前看过一个小故事，大意是自己遇到了困难，打电话找朋友借钱帮忙，结果自己以为的有能力帮忙的几位好友全部借口推脱，反而是自己以为的关系一般的几位朋友纷纷二话不说，慷慨解囊。当他把这件事和一个生意上的朋友说的时候，那个朋友也借机打了十几个电话求帮忙。结果同样出乎意料，本来以]]>
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2015/05/26/bokeh%20notes/"/>
    <id>http://yoursite.com/2015/05/26/bokeh notes/</id>
    <published>2015-05-26T00:32:59.000Z</published>
    <updated>2015-05-26T00:32:59.000Z</updated>
    <content type="html"><![CDATA[<h1 id="bokeh_笔记">bokeh 笔记</h1><blockquote>
<p>The basic steps to creating plots with the bokeh.plotting interface are:<br>1.Prepare some data (in this case plain python lists).<br>2.Tell Bokeh where to generate output (in this case using output_file(), with “lines.html” as the filename to save as).<br>3.Call figure() to create a plot with some overall options like title, tools and axes labels.<br>4.Add renderers (in this case, Figure.line) for our data, with visual customizations like colors, legends and widths to the plot.<br>5.Ask Bokeh to show() or save() the results.</p>
</blockquote>
<h2 id="the_bokeh-plotting_Interface">the bokeh.plotting Interface</h2><h3 id="生成数据">生成数据</h3><p>可以是 list, array? DataFrame(pandas)?</p>
<h3 id="指定输出">指定输出</h3><p>可以是一个 html 文件或者是 ipython notebook</p>
<h3 id="生成一个_figure">生成一个 figure</h3><p>这一步使用 figure 函数 生成一个图，在这一步可以设定图形的一些参数：</p>
<ul>
<li>title</li>
<li>plot_width,plot_height</li>
<li>x_axis_label,y_axis_label</li>
<li>x_range , y_range 可以是2个元素的列表或者元组:[1,10] or (1,10)</li>
<li>tools,可以从这里面随便选TOOLS=”resize,crosshair,pan,wheel_zoom,box_zoom,reset,box_select,lasso_select”</li>
<li>x_axis_type,y_axis_type</li>
<li>legend</li>
<li>toolbar_location:  could be  “above” “below” “left”,”right”</li>
</ul>
<h3 id="利用数据绘图">利用数据绘图</h3><p>在这一步才是利用数据绘图。<br>bokeh provides several functions to draw different shape of glyphs.</p>
<ul>
<li>‘annular_wedge’,</li>
<li>‘annulus’,</li>
<li>‘arc’,</li>
<li>‘asterisk’,</li>
<li>‘bezier’,</li>
<li>‘circle’,</li>
<li>‘circle_cross’,</li>
<li>‘circle_x’,</li>
<li>‘cross’,</li>
<li>‘diamond’,</li>
<li>‘diamond_cross’,</li>
<li>‘image’,</li>
<li>‘image_rgba’,</li>
<li>‘image_url’,</li>
<li>‘inverted_triangle’,</li>
<li>‘line’,</li>
<li>‘multi_line’,</li>
<li>‘oval’,</li>
<li>‘patch’,</li>
<li>‘patches’,</li>
<li>…</li>
</ul>
<p>more than I can image. each glyph has its own parameters. these functions return  a <code>plot</code></p>
<h3 id="show_the_plot">show the plot</h3><p>Finally, <code>show</code> function shows the plot.</p>
<h2 id="bokeh-charts_Interface">bokeh.charts Interface</h2><p>In this Interface, there are several functions:<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'Area'</span>,</span><br><span class="line"><span class="string">'Bar'</span>,</span><br><span class="line"><span class="string">'BoxPlot'</span>,</span><br><span class="line"><span class="string">'ColumnDataSource'</span>,</span><br><span class="line"><span class="string">'DataAdapter'</span>,</span><br><span class="line"> <span class="string">'Donut'</span>,</span><br><span class="line"> <span class="string">'Dot'</span>,</span><br><span class="line"> <span class="string">'HBox'</span>,</span><br><span class="line"> <span class="string">'HeatMap'</span>,</span><br><span class="line"> <span class="string">'Histogram'</span>,</span><br><span class="line"> <span class="string">'Horizon'</span>,</span><br><span class="line"> <span class="string">'Line'</span>,</span><br><span class="line"> <span class="string">'Scatter'</span>,</span><br><span class="line"> <span class="string">'Step'</span>,</span><br><span class="line"> <span class="string">'TimeSeries'</span>,</span><br><span class="line"> <span class="string">'VBox'</span>,</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="bokeh_笔记">bokeh 笔记</h1><blockquote>
<p>The basic steps to creating plots with the bokeh.plotting interface are:<br>1.Prepare some da]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[gbdt]]></title>
    <link href="http://yoursite.com/2015/05/25/gbdt/"/>
    <id>http://yoursite.com/2015/05/25/gbdt/</id>
    <published>2015-05-25T13:41:11.000Z</published>
    <updated>2015-05-26T00:34:24.000Z</updated>
    <content type="html"><![CDATA[<h1 id="GBDT">GBDT</h1><p>关于机器学习，我目前看到的最好的中文书籍是《统计学习方法》，讲解的清晰易懂，而且有算法。看了之后都没有写东西的冲动了。</p>
<pre><code>关于 GBDT，在该书中是放在第八章提升方法提升树这一节。该章首先介绍了 adaboost，关键是每次调整样本的权重，预测对了权重就调低，错了就调高。如何实现这一点呢？用得是
</code></pre><p>$$<br>\alpha_m = \frac{1}{2}log \frac{1-e_m}{e_m}<br>$$<br>其中$e_m$是预测错误率。</p>
<p>然后介绍的是前向分步算法，是一个解决加法模型的算法。紧接着就证明了，如果损失函数取指数损失函数的话，那么能得出 adaboost，也就是说，adaboost 是前向分步算法的一个特列。</p>
<p>紧接着，在提升树算法中，如果采用平方误差损失的话，损失变成了</p>
<p>$$<br>L(y,f<em>{m-1}(x)+T(x;\Theta_m))=[y-f</em>{m-1}(x)-T(x;\Theta_m)]^2=[r-T(x;\Theta_m)]^2<br>$$</p>
<p>其中，r 是当前模型拟合的残差</p>
<p>所以，对于回归问题的提升树来说，只需拟合当前模型的残差即可。</p>
<p>我觉得这很有意思，以前是要修改样本的权重，到现在是要拟合残差，和样本权重好像没关系了</p>
<p>最后介绍的是梯度提升，说如果的是利用损失函数的负梯度在当前模型的值<br>$$<br>-\bigg[\frac{\partial L(y,\;f(x<em>{i}))}{\partial f(x</em>{i})}\bigg]<em>{f(x)=f</em>{m-1}(x)}<br>$$<br>来作为回归问题提升树算法中得残差近似值。</p>
<p>这里给出了 R 的<a href="http://xccds1977.blogspot.com/2015/05/boosting.html" target="_blank" rel="external">博客</a></p>
<p><a href="https://gist.githubusercontent.com/xccds/432b8752a2f9c14e3148/raw/gbm.R" target="_blank" rel="external">代码</a></p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># Learn Gradient Boosting Model by coding</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># good slide</span></span><br><span class="line"><span class="comment"># http://www.ccs.neu.edu/home/vip/teach/MLcourse/4_boosting/slides/gradient_boosting.pdf</span></span><br><span class="line"><span class="comment"># http://cran.r-project.org/web/packages/gbm/gbm.pdf</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#1 Gradient Boosting for Regression</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># generate data</span></span><br><span class="line">generate_func = <span class="keyword">function</span>(n=<span class="number">1000</span>,size=<span class="number">0.5</span>)&#123;</span><br><span class="line">  <span class="comment"># n: how many data points</span></span><br><span class="line">  <span class="comment"># size: hold 50% of all data as train </span></span><br><span class="line">  set.seed(<span class="number">1</span>)</span><br><span class="line">  x = seq(<span class="number">0</span>,<span class="number">2</span>*pi,length=n) <span class="comment"># generate x</span></span><br><span class="line">  noise = rnorm(n,<span class="number">0</span>,<span class="number">0.3</span>)</span><br><span class="line">  y = sin(x) + noise <span class="comment"># generate y</span></span><br><span class="line">  select_index = sample(<span class="number">1</span>:n,size=size*n,replace = <span class="literal">F</span>)</span><br><span class="line">  <span class="comment"># split data into train and test</span></span><br><span class="line">  train_x = x[select_index]</span><br><span class="line">  train_y = y[select_index]</span><br><span class="line">  test_x = x[-select_index]</span><br><span class="line">  test_y = y[-select_index]</span><br><span class="line">  data = list(<span class="string">'train_x'</span>=train_x,</span><br><span class="line">             <span class="string">'train_y'</span>=train_y,</span><br><span class="line">             <span class="string">'test_x'</span>=test_x,</span><br><span class="line">             <span class="string">'test_y'</span>=test_y)</span><br><span class="line">  <span class="keyword">return</span>(data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data = generate_func()</span><br><span class="line">objects(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># train boosting regression tree</span></span><br><span class="line">GBR = <span class="keyword">function</span>(x,y,rate=<span class="number">1</span>,iter=<span class="number">100</span>)&#123;</span><br><span class="line">  <span class="comment"># iter is iterate number, higher is better, but be carefule overfit.</span></span><br><span class="line">  <span class="comment"># rate is learning speed, lower is better, but too slow will cause longer time. </span></span><br><span class="line">  <span class="keyword">library</span>(rpart)</span><br><span class="line">  max_depth=<span class="number">1</span> <span class="comment"># tree stump</span></span><br><span class="line">  mu = mean(y) <span class="comment"># start with an initial model</span></span><br><span class="line">  dy = y - mu  <span class="comment"># residuals or error,  These are the parts that existing model cannot do well.</span></span><br><span class="line">  learner = list() <span class="comment"># define a learners holder </span></span><br><span class="line">  <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span>:iter) &#123;</span><br><span class="line">    <span class="comment"># use a weak model to improve</span></span><br><span class="line">    learner[[i]] = rpart(dy~x, <span class="comment"># error is target variable</span></span><br><span class="line">                         control=rpart.control(maxdepth=max_depth,cp=<span class="number">0</span>)) <span class="comment"># cp=0 means to growth a tree with any cost</span></span><br><span class="line">    <span class="comment"># modify residuals for next iter</span></span><br><span class="line">    dy = dy - rate*predict(learner[[i]])</span><br><span class="line">  &#125;</span><br><span class="line">  result = list(<span class="string">'learner'</span>=learner,</span><br><span class="line">                <span class="string">'rate'</span>=rate,</span><br><span class="line">                <span class="string">'iter'</span>=iter)</span><br><span class="line">  <span class="keyword">return</span>(result)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">model = GBR(data$train_x,data$train_y,iter=<span class="number">1000</span>)</span><br><span class="line">objects(model)</span><br><span class="line"></span><br><span class="line"><span class="comment"># predict function</span></span><br><span class="line">predict_GBR = <span class="keyword">function</span>(x,y,model)&#123;</span><br><span class="line">  predict_y = list() <span class="comment"># hold predict result</span></span><br><span class="line">  mu = mean(y) <span class="comment"># initial model</span></span><br><span class="line">  n = length(y)</span><br><span class="line">  iter = model$iter</span><br><span class="line">  rate = model$rate</span><br><span class="line">  predict_y[[<span class="number">1</span>]] = rep(mu,n)</span><br><span class="line">  learner = model$learner</span><br><span class="line">  <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">2</span>:iter) &#123;</span><br><span class="line">    <span class="comment"># add pre-model prediction to predict y</span></span><br><span class="line">    predict_y[[i]] = predict_y[[i-<span class="number">1</span>]] + rate * predict(learner[[i-<span class="number">1</span>]],newdata=data.frame(x))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment"># mean sqare error</span></span><br><span class="line">  mse = sapply(predict_y,<span class="keyword">function</span>(pre_y) round(mean((y-pre_y)^<span class="number">2</span>),<span class="number">3</span>))</span><br><span class="line">  result = list(<span class="string">'predict_y'</span>=predict_y,</span><br><span class="line">                <span class="string">'mse'</span>= mse)</span><br><span class="line">  <span class="keyword">return</span>(result)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># predict train data</span></span><br><span class="line">predict_train = predict_GBR(data$train_x,data$train_y,model=model)</span><br><span class="line">objects(predict_train)</span><br><span class="line"></span><br><span class="line"><span class="comment"># more trees get less error</span></span><br><span class="line">plot(predict_train$mse,type=<span class="string">'l'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># plot the effect of boosing tree</span></span><br><span class="line">plotfunc = <span class="keyword">function</span>(x,y,predict,num)&#123;</span><br><span class="line">  <span class="keyword">library</span>(ggplot2)</span><br><span class="line">  pre = predict$predict_y[[num]] </span><br><span class="line">  plotdf = data.frame(x=x,y=y,pre = pre)</span><br><span class="line">  mse = round(mean((y-pre)^<span class="number">2</span>),<span class="number">3</span>)</span><br><span class="line">  p = ggplot(plotdf,aes(x,y)) +</span><br><span class="line">    geom_point(alpha=<span class="number">0.5</span>)</span><br><span class="line">  p = p + geom_line(aes(x,pre)) + xlab(paste0(<span class="string">'mse='</span>,mse))</span><br><span class="line">  plot(p)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># use mean of y to predict data</span></span><br><span class="line">plotfunc(data$train_x,data$train_y,predict_train,num=<span class="number">1</span>)</span><br><span class="line"><span class="comment"># add another tree model</span></span><br><span class="line">plotfunc(data$train_x,data$train_y,predict_train,num=<span class="number">2</span>)</span><br><span class="line"><span class="comment"># add more tree getter more result</span></span><br><span class="line">plotfunc(data$train_x,data$train_y,predict_train,num=<span class="number">10</span>)</span><br><span class="line">plotfunc(data$train_x,data$train_y,predict_train,num=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># predict test data</span></span><br><span class="line">predict_test = predict_GBR(data$test_x,data$test_y,model=model)</span><br><span class="line">plot(predict_test$mse,type=<span class="string">'l'</span>)</span><br><span class="line"></span><br><span class="line">plotfunc(data$test_x,data$test_y,predict_test,<span class="number">10</span>)</span><br><span class="line">plotfunc(data$test_x,data$test_y,predict_test,<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># compare different parametter</span></span><br><span class="line"><span class="comment"># create 2 models with different rate</span></span><br><span class="line">model_1 = GBR(data$train_x,data$train_y,rate=<span class="number">1</span>,iter=<span class="number">500</span>)</span><br><span class="line">model_2 = GBR(data$train_x,data$train_y,rate=<span class="number">0.1</span>,iter=<span class="number">500</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># use train and test data, we have 4 results</span></span><br><span class="line">predict_train_1 = predict_GBR(data$train_x,data$train_y,model=model_1)</span><br><span class="line">predict_train_2 = predict_GBR(data$train_x,data$train_y,model=model_2)</span><br><span class="line">predict_test_1 = predict_GBR(data$test_x,data$test_y,model=model_1)</span><br><span class="line">predict_test_2 = predict_GBR(data$test_x,data$test_y,model=model_2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># take out mse of these 4 results</span></span><br><span class="line">train_error_1 = predict_train_1$mse</span><br><span class="line">train_error_2 = predict_train_2$mse</span><br><span class="line">test_error_1 = predict_test_1$mse</span><br><span class="line">test_error_2 = predict_test_2$mse</span><br><span class="line">iter = <span class="number">1</span>:model_1$iter</span><br><span class="line"></span><br><span class="line"><span class="comment"># compare these mse</span></span><br><span class="line">plotdf = data.frame(iter,train_error_1,test_error_1,train_error_2,test_error_2)</span><br><span class="line"></span><br><span class="line">p = ggplot(plotdf)+</span><br><span class="line">    geom_line(aes(x=iter,y=train_error_1),color=<span class="string">'blue'</span>)+</span><br><span class="line">    geom_line(aes(x=iter,y=test_error_1),color=<span class="string">'red'</span>) +</span><br><span class="line">  geom_line(aes(x=iter,y=train_error_2),linetype=<span class="number">2</span>,color=<span class="string">'blue'</span>)+</span><br><span class="line">  geom_line(aes(x=iter,y=test_error_2),linetype=<span class="number">2</span>,color=<span class="string">'red'</span>)</span><br><span class="line">print(p)</span><br><span class="line"></span><br><span class="line"><span class="comment"># test error is better model performance.</span></span><br><span class="line"><span class="comment"># less rate is better but need more iter</span></span><br><span class="line">which.min(train_error_1)</span><br><span class="line">which.min(train_error_2)</span><br><span class="line">which.min(test_error_1)</span><br><span class="line">which.min(test_error_2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. Gradient Boosting for Classification</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># read data</span></span><br><span class="line">data = subset(iris,Species!=<span class="string">'virginica'</span>,select = c(<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>))</span><br><span class="line">data$y = ifelse(data$Species == <span class="string">'setosa'</span>,<span class="number">1</span>,-<span class="number">1</span>)</span><br><span class="line">data$Species = <span class="literal">NULL</span></span><br><span class="line">names(data)[<span class="number">1</span>:<span class="number">2</span>] = c(<span class="string">'x1'</span>,<span class="string">'x2'</span>)</span><br><span class="line">head(data)</span><br><span class="line">p = ggplot(data,aes(x1,x2,color=factor(y)))+</span><br><span class="line">    geom_point()</span><br><span class="line">print(p)</span><br><span class="line"></span><br><span class="line"><span class="comment"># train boosting tree for classification</span></span><br><span class="line">GBC = <span class="keyword">function</span>(data,rate=<span class="number">0.1</span>,iter=<span class="number">100</span>)&#123;</span><br><span class="line">  <span class="keyword">library</span>(rpart)</span><br><span class="line">  max_depth=<span class="number">1</span></span><br><span class="line">  learner = list()</span><br><span class="line">  mu = mean(data$y==<span class="number">1</span>)</span><br><span class="line">  <span class="comment"># start with an initial model</span></span><br><span class="line">  <span class="comment"># mu=p(y=1) -&gt; f=w*x = log(mu/(1-mu)) </span></span><br><span class="line">  f = log(mu/(<span class="number">1</span>-mu)) </span><br><span class="line">  data$dy = data$y/(<span class="number">1</span>+exp(data$y*f)) <span class="comment"># dy is negtive gradient of log loss funtion</span></span><br><span class="line">  <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span>:iter) &#123;</span><br><span class="line">    <span class="comment"># use a weak model to improve</span></span><br><span class="line">    learner[[i]] = rpart(dy~x1+x2,data=data,</span><br><span class="line">                         control=rpart.control(maxdepth=max_depth,cp=<span class="number">0</span>))</span><br><span class="line">    <span class="comment"># improve model </span></span><br><span class="line">    f = f + rate *predict(learner[[i]])</span><br><span class="line">    <span class="comment"># modify dy</span></span><br><span class="line">    data$dy = data$y/(<span class="number">1</span>+exp(data$y*f))</span><br><span class="line">  &#125;</span><br><span class="line">  result = list(<span class="string">'learner'</span>=learner,</span><br><span class="line">                <span class="string">'rate'</span>=rate,</span><br><span class="line">                <span class="string">'iter'</span>=iter)</span><br><span class="line">  <span class="keyword">return</span>(result)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">model = GBC(data,rate=<span class="number">0.1</span>,iter=<span class="number">1000</span>)</span><br><span class="line">objects(model)</span><br><span class="line"></span><br><span class="line"><span class="comment"># predict function</span></span><br><span class="line">predict_GBC = <span class="keyword">function</span>(data,model)&#123;</span><br><span class="line">  predict_y = list()</span><br><span class="line">  mu = mean(data$y==<span class="number">1</span>)</span><br><span class="line">  f = log(mu/(<span class="number">1</span>-mu)) </span><br><span class="line">  n = nrow(data)</span><br><span class="line">  iter = model$iter</span><br><span class="line">  rate = model$rate</span><br><span class="line">  predict_y[[<span class="number">1</span>]] = rep(f,n)</span><br><span class="line">  learner = model$learner</span><br><span class="line">  <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">2</span>:iter) &#123;</span><br><span class="line">    predict_y[[i]] = predict_y[[i-<span class="number">1</span>]] + rate *predict(learner[[i-<span class="number">1</span>]],newdata=data)</span><br><span class="line">  &#125;</span><br><span class="line">  mse = sapply(predict_y,<span class="keyword">function</span>(pre_y) sum(log(<span class="number">1</span>+exp(-data$y*pre_y)))) <span class="comment"># logistic loss function</span></span><br><span class="line">  result = list(<span class="string">'predict_y'</span>=predict_y,</span><br><span class="line">                <span class="string">'mse'</span>= mse)</span><br><span class="line">  <span class="keyword">return</span>(result)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># predict data</span></span><br><span class="line">predict_train = predict_GBC(data,model=model)</span><br><span class="line">objects(predict_train)</span><br><span class="line">plot(predict_train$mse,type=<span class="string">'l'</span>)</span><br><span class="line"></span><br><span class="line">final = predict_train$predict_y[[<span class="number">1000</span>]]</span><br><span class="line">y_p = <span class="number">1</span>/(<span class="number">1</span>+exp(-final))</span><br><span class="line">y_pred = ifelse(y_p&gt;<span class="number">0.5</span>,<span class="number">1</span>,-<span class="number">1</span>)</span><br><span class="line">table(data$y, y_pred)</span><br><span class="line"></span><br><span class="line"><span class="comment"># # plot</span></span><br><span class="line"></span><br><span class="line">plotfunc2 = <span class="keyword">function</span>(data,num,rate=<span class="number">0.1</span>)&#123;</span><br><span class="line">  <span class="keyword">library</span>(ggplot2)</span><br><span class="line">  model = GBC(data,rate=rate,iter=num)</span><br><span class="line">  predict_train = predict_GBC(data,model=model)</span><br><span class="line">  final = predict_train$predict_y[[num]]</span><br><span class="line">  y_p = <span class="number">1</span>/(<span class="number">1</span>+exp(-final))</span><br><span class="line">  data$y_pre = ifelse(y_p&gt;<span class="number">0.5</span>,<span class="number">1</span>,-<span class="number">1</span>)</span><br><span class="line">  tree_f = sapply(model$learner,<span class="keyword">function</span>(x)&#123;</span><br><span class="line">    temp = x$splits</span><br><span class="line">    <span class="keyword">return</span>(row.names(temp)[<span class="number">1</span>])</span><br><span class="line">  &#125;)</span><br><span class="line">  tree_v = sapply(model$learner,<span class="keyword">function</span>(x)&#123;</span><br><span class="line">    temp = x$splits</span><br><span class="line">    <span class="keyword">return</span>(temp[<span class="number">1</span>,<span class="string">'index'</span>])</span><br><span class="line">  &#125;)</span><br><span class="line">  x1value = tree_v[tree_f==<span class="string">'x1'</span>]</span><br><span class="line">  x2value = tree_v[tree_f==<span class="string">'x2'</span>]</span><br><span class="line">  p = ggplot(data,aes(x=x1,y=x2))</span><br><span class="line">  p = p + geom_point(aes(color=factor(y_pre)),size=<span class="number">5</span>) +</span><br><span class="line">    geom_point(aes(color=factor(y)),size=<span class="number">3</span>)+</span><br><span class="line">    geom_vline(xintercept = x1value,alpha=<span class="number">0.4</span>) +</span><br><span class="line">    geom_hline(yintercept = x2value,alpha=<span class="number">0.4</span>) +  </span><br><span class="line">    scale_colour_brewer(type=<span class="string">"seq"</span>, palette=<span class="string">'Set1'</span>) +</span><br><span class="line">    theme_bw()</span><br><span class="line">  print(p)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">plotfunc2(data,num=<span class="number">10</span>)</span><br><span class="line">plotfunc2(data,num=<span class="number">20</span>)</span><br><span class="line">plotfunc2(data,num=<span class="number">60</span>)</span><br><span class="line">plotfunc2(data,num=<span class="number">100</span>)</span><br><span class="line">plotfunc2(data,num=<span class="number">1000</span>)</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="GBDT">GBDT</h1><p>关于机器学习，我目前看到的最好的中文书籍是《统计学习方法》，讲解的清晰易懂，而且有算法。看了之后都没有写东西的冲动了。</p>
<pre><code>关于 GBDT，在该书中是放在第八章提升方法提升树这一节。该章首先介绍了 ad]]>
    </summary>
    
      <category term="boosting" scheme="http://yoursite.com/tags/boosting/"/>
    
      <category term="machine learning" scheme="http://yoursite.com/tags/machine-learning/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[machine-learning-work-flow]]></title>
    <link href="http://yoursite.com/2015/05/14/machine-learning-work-flow/"/>
    <id>http://yoursite.com/2015/05/14/machine-learning-work-flow/</id>
    <published>2015-05-14T10:57:33.000Z</published>
    <updated>2015-05-14T11:09:08.000Z</updated>
    <content type="html"><![CDATA[<h2 id="数据预处理">数据预处理</h2><p>去掉零方差、多重共线性等<br>在 scikit-learn 中，可以使用 sklearn.feature_selection 模块中的相应函数：</p>
<h3 id="Removing_features_with_low_variance">Removing features with low variance</h3><p>VarianceThreshold </p>
<h3 id="Univariate_feature_selection">Univariate feature selection</h3><ul>
<li><strong>SelectKBest</strong> removes all but the k highest scoring features</li>
<li><strong>SelectPercentile</strong> removes all but a user-specified highest scoring percentage of features</li>
<li>using common univariate statistical tests for each feature: false positive rate <strong>SelectFpr</strong>, false discovery rate <strong>SelectFdr</strong>, or family wise error <strong>SelectFwe</strong>.</li>
<li><strong>GenericUnivariateSelect</strong> allows to perform univariate feature<br>selection with a configurable strategy. This allows to select the best univariate selection strategy with hyper-parameter search estimator.</li>
</ul>
<h3 id="Recursive_feature_elimination">Recursive feature elimination</h3><ul>
<li>RFE</li>
<li>RFECV</li>
</ul>
<h3 id="L1-based_feature_selection">L1-based feature selection</h3><ul>
<li>linear_model.Lasso </li>
<li>linear_model.LogisticRegression</li>
<li>svm.LinearSVC</li>
<li>RandomizedLasso</li>
<li>RandomizedLogisticRegression</li>
<li>lasso_stability_path</li>
</ul>
<h3 id="Tree-based_feature_selection">Tree-based feature selection</h3><ul>
<li>ExtraTreesClassifier in sklearn.ensemble</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="数据预处理">数据预处理</h2><p>去掉零方差、多重共线性等<br>在 scikit-learn 中，可以使用 sklearn.feature_selection 模块中的相应函数：</p>
<h3 id="Removing_features_with_low]]>
    </summary>
    
      <category term="machine learning" scheme="http://yoursite.com/tags/machine-learning/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[gradient-descent-with-line-search]]></title>
    <link href="http://yoursite.com/2015/05/08/gradient-descent-with-line-search/"/>
    <id>http://yoursite.com/2015/05/08/gradient-descent-with-line-search/</id>
    <published>2015-05-08T13:43:07.000Z</published>
    <updated>2015-05-08T13:43:07.000Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[sympy tutorial]]></title>
    <link href="http://yoursite.com/2015/05/03/sympy-tutorial/"/>
    <id>http://yoursite.com/2015/05/03/sympy-tutorial/</id>
    <published>2015-05-03T08:56:13.000Z</published>
    <updated>2015-05-03T09:04:05.000Z</updated>
    <content type="html"><![CDATA[<p>自从看了卡尔曼滤波的教程，看到里面用到了 sympy 来显示公式和进行公式推导，忍不住心里痒痒，就想学学该怎么用。</p>
<pre><code><span class="keyword">from</span> sympy <span class="keyword">import</span> *
<span class="keyword">from</span> sympy.interactive <span class="keyword">import</span> printing
printing.init_printing(use_latex=<span class="keyword">True</span>)
</code></pre><p>这里默认使用 ipython notebook，上面的语句会使用比较漂亮的方式来显示公式。</p>
<h2 id="本文主要记录:">本文主要记录:</h2><p>1.变量的定义</p>
<p>2.演算</p>
<ul>
<li>极限</li>
<li>微分</li>
<li>级数展开</li>
<li>求和</li>
<li>积分</li>
<li>复数</li>
<li>函数</li>
<li>微分方程</li>
<li>代数方程</li>
<li>矩阵</li>
</ul>
<h2 id="变量的定义">变量的定义</h2><p>变量的定义使用 symbols 函数，可以限制变量的类型，比如为整数或者为函数等。</p>
<pre><code>x, y, z, t = <span class="function"><span class="title">symbols</span><span class="params">(<span class="string">'x y z t'</span>)</span></span>


<span class="tag">i</span>,k, m, n = <span class="function"><span class="title">symbols</span><span class="params">(<span class="string">'i k m n'</span>, integer=True)</span></span>


f, g, h = <span class="function"><span class="title">symbols</span><span class="params">(<span class="string">'f g h'</span>, cls=Function)</span></span>


<span class="function"><span class="title">symbols</span><span class="params">(<span class="string">'x:10'</span>)</span></span>
</code></pre><p>$$\left ( x_0, \quad x_1, \quad x_2, \quad x_3, \quad x_4, \quad x_5, \quad x_6, \quad x_7, \quad x_8, \quad x_9\right )$$</p>
<h2 id="极限">极限</h2><pre><code>limit<span class="list">(<span class="keyword">sin</span><span class="list">(<span class="keyword">x</span>)</span>/x,x,<span class="number">0</span>)</span>
</code></pre><p>$$1$$</p>
<p><strong>大小写的区别是大写不运算，小写给出运算结果</strong></p>
<pre><code>Limit<span class="list">(<span class="list">(<span class="number">3</span> <span class="variable">* n *</span><span class="variable">* 2 + 2 *</span> n )</span>/ <span class="list">(<span class="keyword">n</span> <span class="variable">**</span> <span class="number">2</span> + <span class="number">5</span>)</span>,n,oo)</span>
</code></pre><p>$$\lim_{n \to \infty}\left(\frac{3 n^{2} + 2 n}{n^{2} + 5}\right)$$</p>
<pre><code>limit<span class="list">(<span class="list">(<span class="number">3</span> <span class="variable">* n *</span><span class="variable">* 2 + 2 *</span> n )</span>/ <span class="list">(<span class="keyword">n</span> <span class="variable">**</span> <span class="number">2</span> + <span class="number">5</span>)</span>,n,oo)</span>
</code></pre><p>$$3$$</p>
<h2 id="微分">微分</h2><pre><code>diff<span class="list">(<span class="keyword">sin</span><span class="list">(<span class="keyword">x</span>)</span>,x)</span>
</code></pre><p>$$\cos{\left (x \right )}$$</p>
<pre><code><span class="function"><span class="title">diff</span><span class="params">(sin(<span class="number">2</span>*x)</span></span>, x, <span class="number">2</span>)
</code></pre><p>$$- 4 \sin{\left (2 x \right )}$$</p>
<h2 id="积分">积分</h2><pre><code>Integral<span class="list">(<span class="keyword">sqrt</span><span class="list">(<span class="number">1</span>/x)</span>,x)</span>
</code></pre><p>$$\int \sqrt{\frac{1}{x}}\, dx$$</p>
<pre><code>integrate<span class="list">(<span class="keyword">sqrt</span><span class="list">(<span class="number">1</span>/x)</span>,x)</span>
</code></pre><p>$$2 x \sqrt{\frac{1}{x}}$$</p>
<pre><code>integrate<span class="list">(<span class="keyword">sqrt</span><span class="list">(<span class="number">1</span>/x)</span>,<span class="list">(<span class="keyword">x</span>,<span class="number">1</span>,<span class="number">2</span>)</span>)</span>
</code></pre><p>$$-2 + 2 \sqrt{2}$$</p>
<h2 id="多项式">多项式</h2><pre><code>expand<span class="list">(<span class="list">(<span class="keyword">x</span> + <span class="number">1</span>)</span><span class="variable">**</span><span class="number">2</span>)</span>
</code></pre><p>$$x^{2} + 2 x + 1$$</p>
<pre><code>factor(x<span class="keyword">*</span><span class="keyword">*</span>3 - x<span class="keyword">*</span><span class="keyword">*</span>2 + x - 1)
</code></pre><p>$$\left(x - 1\right) \left(x^{2} + 1\right)$$</p>
<h2 id="级数展开">级数展开</h2><p>使用.series(var, point, order):</p>
<pre><code>(<span class="number">1</span>/<span class="function"><span class="title">cos</span><span class="params">(x)</span></span>).<span class="function"><span class="title">series</span><span class="params">(x, <span class="number">0</span>, <span class="number">10</span>)</span></span>
</code></pre><p>$$1 + \frac{x^{2}}{2} + \frac{5 x^{4}}{24} + \frac{61 x^{6}}{720} + \frac{277 x^{8}}{8064} + \mathcal{O}\left(x^{10}\right)$$</p>
<pre><code><span class="function"><span class="title">integrate</span><span class="params">(exp(-x ** <span class="number">2</span>)</span></span>,x).<span class="function"><span class="title">series</span><span class="params">(x,<span class="number">0</span>,<span class="number">10</span>)</span></span>
</code></pre><p>$$x - \frac{x^{3}}{3} + \frac{x^{5}}{10} - \frac{x^{7}}{42} + \frac{x^{9}}{216} + \mathcal{O}\left(x^{10}\right)$$</p>
<h3 id="画出级数图形">画出级数图形</h3><pre><code>%matplotlib inline
<span class="keyword">import</span> numpy <span class="keyword">as</span> np
<span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt
<span class="function"><span class="keyword">def</span> <span class="title">plot_taylor_approximations</span><span class="params">(func, x0=None, orders=<span class="params">(<span class="number">2</span>, <span class="number">4</span>)</span>, xrange=<span class="params">(<span class="number">0</span>,<span class="number">1</span>)</span>, yrange=None, npts=<span class="number">200</span>)</span>:</span>
    <span class="string">"""Plot the Taylor series approximations to a function at various orders.

    Parameters
    ----------
    func : a sympy function
    x0 : float
      Origin of the Taylor series expansion.  If not given, x0=xrange[0].
    orders : list
      List of integers with the orders of Taylor series to show.  Default is (2, 4).
    xrange : 2-tuple or array.
      Either an (xmin, xmax) tuple indicating the x range for the plot (default is (0, 1)),
      or the actual array of values to use.
    yrange : 2-tuple
      (ymin, ymax) tuple indicating the y range for the plot.  If not given,
      the full range of values will be automatically used. 
    npts : int
      Number of points to sample the x range with.  Default is 200.
    """</span>
    <span class="keyword">if</span> <span class="keyword">not</span> callable(func):
        <span class="keyword">raise</span> ValueError(<span class="string">'func must be callable'</span>)
    <span class="keyword">if</span> isinstance(xrange, (list, tuple)):
        x = np.linspace(float(xrange[<span class="number">0</span>]), float(xrange[<span class="number">1</span>]), npts)
    <span class="keyword">else</span>:
        x = xrange
    <span class="keyword">if</span> x0 <span class="keyword">is</span> <span class="keyword">None</span>: x0 = x[<span class="number">0</span>]
    xs = Symbol(<span class="string">'x'</span>)
    <span class="comment"># Make a numpy-callable form of the original function for plotting</span>
    fx = func(xs)
    f = lambdify(xs, fx, modules=[<span class="string">'numpy'</span>])
    <span class="comment"># We could use latex(fx) instead of str(), but matploblib gets confused</span>
    <span class="comment"># with some of the (valid) latex constructs sympy emits.  So we play it safe.</span>
    plt.plot(x, f(x), label=str(fx), lw=<span class="number">2</span>)
    <span class="comment"># Build the Taylor approximations, plotting as we go</span>
    apps = {}
    <span class="keyword">for</span> order <span class="keyword">in</span> orders:
        app = fx.series(xs, x0, n=order).removeO()
        apps[order] = app
        <span class="comment"># Must be careful here: if the approximation is a constant, we can't</span>
        <span class="comment"># blindly use lambdify as it won't do the right thing.  In that case, </span>
        <span class="comment"># evaluate the number as a float and fill the y array with that value.</span>
        <span class="keyword">if</span> isinstance(app, numbers.Number):
            y = np.zeros_like(x)
            y.fill(app.evalf())
        <span class="keyword">else</span>:
            fa = lambdify(xs, app, modules=[<span class="string">'numpy'</span>])
            y = fa(x)
        tex = latex(app).replace(<span class="string">'$'</span>, <span class="string">''</span>)
        plt.plot(x, y, label=<span class="string">r'$n=%s:\, %s$'</span> % (order, tex) )

    <span class="comment"># Plot refinements</span>
    <span class="keyword">if</span> yrange <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:
        plt.ylim(*yrange)
    plt.grid()
    plt.legend(loc=<span class="string">'best'</span>).get_frame().set_alpha(<span class="number">0.8</span>)


<span class="comment"># You can change the default figure size to be a bit larger if you want,</span>
<span class="comment"># uncomment the next line for that:</span>
<span class="comment">#plt.rc('figure', figsize=(10, 6))</span>
plt.rc(<span class="string">'figure'</span>, figsize=(<span class="number">15</span>, <span class="number">9</span>))
plot_taylor_approximations(sin, <span class="number">0</span>, [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>], (<span class="number">0</span>, <span class="number">2</span>*pi), (-<span class="number">2</span>,<span class="number">2</span>))
</code></pre><img src="/hexoblog/2015/05/03/sympy-tutorial/sympy-tutorial_30_0.png">
<h2 id="求和">求和</h2><pre><code>Sum<span class="list">(<span class="keyword">i</span> <span class="variable">**</span> <span class="number">2</span>,<span class="list">(<span class="keyword">i</span>,<span class="number">1</span>,n)</span>)</span>
</code></pre><p>$$\sum_{i=1}^{n} i^{2}$$</p>
<pre><code><span class="function"><span class="title">Sum</span><span class="params">(i ** <span class="number">2</span>,(i,<span class="number">1</span>,n)</span></span>).<span class="function"><span class="title">doit</span><span class="params">()</span></span>
</code></pre><p>$$\frac{n^{3}}{3} + \frac{n^{2}}{2} + \frac{n}{6}$$</p>
<h2 id="复数">复数</h2><pre><code><span class="function"><span class="title">exp</span><span class="params">(I*x)</span></span>.<span class="function"><span class="title">expand</span><span class="params">()</span></span>
</code></pre><p>$$e^{i x}$$</p>
<pre><code><span class="function"><span class="title">exp</span><span class="params">(I*x)</span></span>.<span class="function"><span class="title">expand</span><span class="params">(complex = True)</span></span>
</code></pre><p>$$i e^{- \Im{x}} \sin{\left (\Re{x} \right )} + e^{- \Im{x}} \cos{\left (\Re{x} \right )}$$</p>
<h2 id="微分方程">微分方程</h2><pre><code><span class="function"><span class="title">f</span><span class="params">(x)</span></span>.<span class="function"><span class="title">diff</span><span class="params">(x, x)</span></span> + <span class="function"><span class="title">f</span><span class="params">(x)</span></span>
</code></pre><p>$$f{\left (x \right )} + \frac{d^{2}}{d x^{2}}  f{\left (x \right )}$$</p>
<pre><code><span class="function"><span class="title">dsolve</span><span class="params">(f(x)</span></span>.<span class="function"><span class="title">diff</span><span class="params">(x, x)</span></span> + <span class="function"><span class="title">f</span><span class="params">(x)</span></span>, <span class="function"><span class="title">f</span><span class="params">(x)</span></span>)
</code></pre><p>$$<br>f(x) = C_1 \sin(x) + C_2 \cos(x)<br>$$</p>
<h2 id="矩阵">矩阵</h2><pre><code>A = Matrix([[x <span class="keyword">*</span><span class="keyword">*</span> 2,2<span class="keyword">*</span>x<span class="keyword">*</span>y], [2<span class="keyword">*</span>x<span class="keyword">*</span>y,y <span class="keyword">*</span><span class="keyword">*</span> 2]])


A
</code></pre><p>$$\left[\begin{matrix}x^{2} &amp; 2 x y\\2 x y &amp; y^{2}\end{matrix}\right]$$</p>
<pre><code>A <span class="keyword">*</span><span class="keyword">*</span> 2
</code></pre><p>$$\left[\begin{matrix}x^{4} + 4 x^{2} y^{2} &amp; 2 x^{3} y + 2 x y^{3}\\2 x^{3} y + 2 x y^{3} &amp; 4 x^{2} y^{2} + y^{4}\end{matrix}\right]$$</p>
<pre><code>variables = Matrix<span class="comment">([x,y])</span>


<span class="comment">(A ** 2)</span>.row<span class="comment">(0)</span>
</code></pre><p>$$\left[\begin{matrix}x^{4} + 4 x^{2} y^{2} &amp; 2 x^{3} y + 2 x y^{3}\end{matrix}\right]$$</p>
<pre><code>(A <span class="keyword">*</span><span class="keyword">*</span> 2).row(0).jacobian(variables)
</code></pre><p>$$\left[\begin{matrix}4 x^{3} + 8 x y^{2} &amp; 8 x^{2} y\\6 x^{2} y + 2 y^{3} &amp; 2 x^{3} + 6 x y^{2}\end{matrix}\right]$$</p>
<pre><code>hessian<span class="list">(<span class="keyword">f</span><span class="list">(<span class="keyword">x</span>,y)</span>,<span class="list">(<span class="keyword">x</span>,y)</span>)</span>
</code></pre><p>$$\left[\begin{matrix}\frac{\partial^{2}}{\partial x^{2}}  f{\left (x,y \right )} &amp; \frac{\partial^{2}}{\partial x\partial y}  f{\left (x,y \right )}\\<br>\frac{\partial^{2}}{\partial x\partial y}  f{\left (x,y \right )} &amp; \frac{\partial^{2}}{\partial y^{2}}  f{\left (x,y \right )}\end{matrix}\right]$$</p>
<pre><code>diff<span class="list">(<span class="keyword">f</span><span class="list">(<span class="keyword">x</span>,y)</span>,x)</span>
</code></pre><p>$$\frac{\partial}{\partial x} f{\left (x,y \right )}$$</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>自从看了卡尔曼滤波的教程，看到里面用到了 sympy 来显示公式和进行公式推导，忍不住心里痒痒，就想学学该怎么用。</p>
<pre><code><span class="keyword">from</span> sympy <span class="keyword">im]]>
    </summary>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="sympy" scheme="http://yoursite.com/tags/sympy/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Finonacci_heap]]></title>
    <link href="http://yoursite.com/2015/04/30/Fibonacci-heap/"/>
    <id>http://yoursite.com/2015/04/30/Fibonacci-heap/</id>
    <published>2015-04-30T11:15:17.000Z</published>
    <updated>2015-04-30T11:17:19.000Z</updated>
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="string">"""Fibonacci Heap</span><br><span class="line"></span><br><span class="line">   Fibonacci heaps are especially desirable when the number of</span><br><span class="line">   extract_min() and delete() operations is small relative to the</span><br><span class="line">   number of other operations performed.</span><br><span class="line">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> util <span class="keyword">import</span> torange</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FibonacciHeap</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.min = <span class="keyword">None</span></span><br><span class="line">        self.n = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FibonacciHeapNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        self.key = key</span><br><span class="line">        self.refresh()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">refresh</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.degree = <span class="number">0</span></span><br><span class="line">        self.parent = <span class="keyword">None</span></span><br><span class="line">        self.child = <span class="keyword">None</span></span><br><span class="line">        self.left = self</span><br><span class="line">        self.right = self</span><br><span class="line">        self.mark = <span class="keyword">False</span></span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_heap</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> FibonacciHeap()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_node</span><span class="params">(k)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> FibonacciHeapNode(k)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">minimum</span><span class="params">(H)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> H.min</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_empty</span><span class="params">(H)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> H.n == <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(H, x)</span>:</span></span><br><span class="line">    x.refresh()</span><br><span class="line">    <span class="keyword">if</span> H.min == <span class="keyword">None</span>:</span><br><span class="line">        H.min = x</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        w = H.min.left</span><br><span class="line">        y = H.min</span><br><span class="line">        x.left = w</span><br><span class="line">        x.right = y</span><br><span class="line">        w.right = x</span><br><span class="line">        y.left = x</span><br><span class="line">        <span class="keyword">if</span> x.key &lt; H.min.key:</span><br><span class="line">            H.min = x</span><br><span class="line">    H.n = H.n + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extract</span><span class="params">(H)</span>:</span></span><br><span class="line">    x = H.min</span><br><span class="line">    <span class="keyword">if</span> x != <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">if</span> x.child != <span class="keyword">None</span>:</span><br><span class="line">            __add_list(x.child, x)</span><br><span class="line">        x.left.right = x.right</span><br><span class="line">        x.right.left = x.left</span><br><span class="line">        <span class="keyword">if</span> x == x.right:</span><br><span class="line">            H.min = <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            H.min = x.right</span><br><span class="line">            __consolidate(H)</span><br><span class="line">        H.n = H.n - <span class="number">1</span></span><br><span class="line">        x.refresh()</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrease_key</span><span class="params">(H, x, k)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span>(k &lt;= x.key)</span><br><span class="line">    <span class="keyword">if</span> k == x.key:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    x.key = k</span><br><span class="line">    y = x.parent</span><br><span class="line">    <span class="keyword">if</span> y != <span class="keyword">None</span> <span class="keyword">and</span> x.key &lt; y.key:</span><br><span class="line">        __cut(H, x, y)</span><br><span class="line">        __cascading_cut(H, y)</span><br><span class="line">    <span class="keyword">if</span> x.key &lt; H.min.key:</span><br><span class="line">        H.min = x</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__cut</span><span class="params">(H, x, y)</span>:</span></span><br><span class="line">    <span class="comment"># remove x from the child list of y, decrementing y.degree.</span></span><br><span class="line">    x.left.right = x.right</span><br><span class="line">    x.right.left = x.left</span><br><span class="line">    y.degree = y.degree - <span class="number">1</span></span><br><span class="line">    y.child = x.right</span><br><span class="line">    <span class="keyword">if</span> x == x.right:</span><br><span class="line">        y.child = <span class="keyword">None</span></span><br><span class="line">    <span class="comment"># add x to the root list of H</span></span><br><span class="line">    x.parent = <span class="keyword">None</span></span><br><span class="line">    x.mark = <span class="keyword">False</span></span><br><span class="line">    x.left = H.min.left</span><br><span class="line">    x.right = H.min</span><br><span class="line">    x.left.right = x</span><br><span class="line">    x.right.left = x</span><br><span class="line">    <span class="comment">#__add_list(x, H.min)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__cascading_cut</span><span class="params">(H, y)</span>:</span></span><br><span class="line">    z = y.parent</span><br><span class="line">    <span class="keyword">if</span> z != <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">if</span> y.mark == <span class="keyword">False</span>:</span><br><span class="line">            y.mark = <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            __cut(H, y, z)</span><br><span class="line">            __cascading_cut(H, z)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__add_list</span><span class="params">(y, x)</span>:</span></span><br><span class="line">    <span class="string">"""Add list y to x."""</span></span><br><span class="line">    <span class="keyword">if</span> y == <span class="keyword">None</span> <span class="keyword">or</span> x == <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    z = y</span><br><span class="line">    <span class="keyword">while</span> z.right != y:</span><br><span class="line">        z.parent = x.parent</span><br><span class="line">        z = z.right</span><br><span class="line">    z.parent = x.parent</span><br><span class="line">    y.left = x.left</span><br><span class="line">    x.left.right = y</span><br><span class="line">    z.right = x</span><br><span class="line">    x.left = z</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__union</span><span class="params">(H1, H2)</span>:</span></span><br><span class="line">    H = FibonacciHeap()</span><br><span class="line">    <span class="keyword">if</span> H1.min != <span class="keyword">None</span> <span class="keyword">and</span> H2.min == <span class="keyword">None</span>:</span><br><span class="line">        H.min = H1.min</span><br><span class="line">        H.n = H1.n</span><br><span class="line">    <span class="keyword">elif</span> H1.min == <span class="keyword">None</span> <span class="keyword">and</span> H2.min != <span class="keyword">None</span>:</span><br><span class="line">        H.min = H2.min</span><br><span class="line">        H.n = H2.n</span><br><span class="line">    <span class="keyword">elif</span> H1.min != <span class="keyword">None</span> <span class="keyword">and</span> H2.min != <span class="keyword">None</span>:</span><br><span class="line">        __add_list(H2.min, H1.min)</span><br><span class="line">        <span class="keyword">if</span> H1.min.key &lt;= H2.min.key:</span><br><span class="line">            H.min = H1.min</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            H.min = H2.min</span><br><span class="line">        H.n = H1.n + H2.n</span><br><span class="line">    <span class="keyword">return</span> H</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__consolidate</span><span class="params">(H)</span>:</span></span><br><span class="line">    max_degree = __max_degree(H.n)</span><br><span class="line">    A = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> torange(<span class="number">0</span>, max_degree):</span><br><span class="line">        A.append(<span class="keyword">None</span>)</span><br><span class="line">    root_list = []</span><br><span class="line">    x = H.min</span><br><span class="line">    x.left.right = <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">while</span> x != <span class="keyword">None</span>:</span><br><span class="line">        next_x = x.right</span><br><span class="line">        x.left = x</span><br><span class="line">        x.right = x</span><br><span class="line">        root_list.append(x)</span><br><span class="line">        x = next_x</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> root_list:</span><br><span class="line">        <span class="comment">#__print_node_info(x)</span></span><br><span class="line">        d = x.degree</span><br><span class="line">        <span class="comment">#print "index=", d, "max_degree=", max_degree, "H.n=",H.n</span></span><br><span class="line">        <span class="keyword">while</span> A[d] != <span class="keyword">None</span>:</span><br><span class="line">            y = A[d]</span><br><span class="line">            <span class="keyword">if</span> y.key &lt; x.key:</span><br><span class="line">                x,y = y,x</span><br><span class="line">            __link(y, x)</span><br><span class="line">            A[d] = <span class="keyword">None</span></span><br><span class="line">            d = d + <span class="number">1</span></span><br><span class="line">        A[d] = x</span><br><span class="line">    H.min = <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> A:</span><br><span class="line">        <span class="keyword">if</span> x != <span class="keyword">None</span>:</span><br><span class="line">            x.left = x</span><br><span class="line">            x.right = x</span><br><span class="line">            x.parent = <span class="keyword">None</span></span><br><span class="line">            <span class="keyword">if</span> H.min == <span class="keyword">None</span>:</span><br><span class="line">                H.min = x</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                __add_list(x, H.min)</span><br><span class="line">                <span class="keyword">if</span> x.key &lt; H.min.key:</span><br><span class="line">                    H.min = x</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__print_node_info</span><span class="params">(x)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">print</span> <span class="string">"""</span><br><span class="line">    --- node info ---</span><br><span class="line">    key = %.1f</span><br><span class="line">    """</span> % (x.key)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__max_degree</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="string">"""floor(lg(n))"""</span></span><br><span class="line">    lg = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> n/<span class="number">2</span> &gt; <span class="number">0</span>:</span><br><span class="line">        lg = lg + <span class="number">1</span></span><br><span class="line">        n = n / <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> lg</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__link</span><span class="params">(y, x)</span>:</span></span><br><span class="line">    y.left.right = y.right</span><br><span class="line">    y.right.left = y.left</span><br><span class="line">    y.parent = x</span><br><span class="line">    <span class="keyword">if</span> x.child != <span class="keyword">None</span>:</span><br><span class="line">        x.child.left.right = y</span><br><span class="line">        y.left = x.child.left</span><br><span class="line">        y.right = x.child</span><br><span class="line">        x.child.left = y</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        x.child = y</span><br><span class="line">        y.left = y</span><br><span class="line">        y.right = y</span><br><span class="line">    x.degree = x.degree + <span class="number">1</span></span><br><span class="line">    y.mark = <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment">######################################################################</span></span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_heap</span><span class="params">(s, indent=<span class="string">'#'</span>, char=<span class="string">'#'</span>)</span>:</span></span><br><span class="line">    x = s</span><br><span class="line">    first_iteration = <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">while</span> x != <span class="keyword">None</span> <span class="keyword">and</span> (first_iteration <span class="keyword">or</span> x != s):</span><br><span class="line">        first_iteration = <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"%s %s [%d]"</span> %(indent, x.key, x.degree)</span><br><span class="line">        <span class="keyword">if</span> x.child != <span class="keyword">None</span>:</span><br><span class="line">            print_heap(x.child, indent+char, char)</span><br><span class="line">        x = x.right</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_heap</span><span class="params">(H)</span>:</span></span><br><span class="line">    print_heap(H.min, <span class="string">'o'</span>, <span class="string">'-&gt;'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#data = [31,40,50,37,45,60,65,73,23,76]</span></span><br><span class="line">    <span class="comment">#data = [10,20,30,40,50,60,70,80,90]</span></span><br><span class="line">    data = [<span class="number">30</span>,<span class="number">10</span>,<span class="number">90</span>,<span class="number">80</span>,<span class="number">60</span>,<span class="number">70</span>,<span class="number">20</span>,<span class="number">50</span>,<span class="number">40</span>]</span><br><span class="line">    <span class="comment">#data = [3,3,2,1,8,3,7]</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Input data:"</span>, data</span><br><span class="line"></span><br><span class="line">    <span class="comment">############################################################</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"""</span><br><span class="line">    We print out the state of the heap as each data item is wrapped in</span><br><span class="line">    a node and inserted into the heap.  Depth of the tree is indicated</span><br><span class="line">    by the indentation.  The first number is the key, and the number</span><br><span class="line">    in square brackets the degree of the node.</span><br><span class="line">    """</span></span><br><span class="line"></span><br><span class="line">    min = <span class="keyword">None</span></span><br><span class="line">    max = <span class="keyword">None</span></span><br><span class="line">    nodes = []</span><br><span class="line">    H = make_heap()</span><br><span class="line">    <span class="keyword">for</span> d <span class="keyword">in</span> data:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"---------------------------------------- insert (%2d) ---"</span>%(d)</span><br><span class="line">        n = make_node(d)</span><br><span class="line">        <span class="keyword">if</span> min == <span class="keyword">None</span> <span class="keyword">or</span> n.key &lt; min.key:</span><br><span class="line">            min = n</span><br><span class="line">        <span class="keyword">if</span> max == <span class="keyword">None</span> <span class="keyword">or</span> n.key &gt; max.key:</span><br><span class="line">            max = n</span><br><span class="line">        nodes.append(n)</span><br><span class="line">        insert(H, n)</span><br><span class="line">        print_heap(H.min, <span class="string">'o'</span>, <span class="string">'-&gt;'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">############################################################</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"""</span><br><span class="line">    Test if the D() function (__max_degree()) works.  Print out</span><br><span class="line">    D(0..9).</span><br><span class="line">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">10</span>):</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"D(%d)=%d"</span> % (i, __max_degree(i))</span><br><span class="line"></span><br><span class="line">    <span class="comment">############################################################</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"""</span><br><span class="line">    Extract half of the data.  Do we get them in the right order?</span><br><span class="line">    """</span></span><br><span class="line"></span><br><span class="line">    print_heap(H.min, <span class="string">'o'</span>, <span class="string">'-&gt;'</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(len(data)/<span class="number">2</span>):</span><br><span class="line">        n = extract(H)</span><br><span class="line">        <span class="keyword">if</span> n != <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"---------------------------------------- extracted (%2d) ---"</span>%(n.key)</span><br><span class="line">            print_heap(H.min, <span class="string">'o'</span>, <span class="string">'-&gt;'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"---------------------------------------- extracted (None) ---"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">############################################################</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"""</span><br><span class="line">    To test decrease key, we print out the state of the heap, decrease</span><br><span class="line">    node %d to %d, and print out the heap again.</span><br><span class="line">    """</span> % (max.key, min.key)</span><br><span class="line"></span><br><span class="line">    print_heap(H.min, <span class="string">'before o'</span>, <span class="string">'-&gt;'</span>)</span><br><span class="line">    decrease_key(H, max, min.key)</span><br><span class="line">    <span class="keyword">print</span></span><br><span class="line">    print_heap(H.min, <span class="string">'after  o'</span>, <span class="string">'-&gt;'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">############################################################</span></span><br><span class="line">    factor = <span class="number">2</span></span><br><span class="line">    repetitions = <span class="number">10</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"""</span><br><span class="line">    Rigorous insert and extract test.  We extract one node, multiply</span><br><span class="line">    it by %.1f, insert it back in, and repeat this %d times.</span><br><span class="line">    """</span> % (factor, repetitions)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(repetitions):</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"------------------------------------------------------------"</span></span><br><span class="line">        n = extract(H)</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Extracted %.1f"</span> % (n.key)</span><br><span class="line">        n.key = n.key * factor</span><br><span class="line">        insert(H, n)</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Inserted %.1f"</span> % (n.key)</span><br><span class="line">        print_heap(H.min, <span class="string">'o'</span>, <span class="string">'-&gt;'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">######################################################################</span></span><br><span class="line"><span class="comment">######################################################################</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>: test()</span><br><span class="line"></span><br><span class="line"><span class="comment">#  LocalWords:  doublely</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span clas]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[floyd_warshall]]></title>
    <link href="http://yoursite.com/2015/04/30/floyd-warshall/"/>
    <id>http://yoursite.com/2015/04/30/floyd-warshall/</id>
    <published>2015-04-30T02:58:59.000Z</published>
    <updated>2015-04-30T03:00:27.000Z</updated>
    <content type="html"><![CDATA[<p>wiki 伪代码</p>
<h2 id="algorithm">algorithm</h2><pre><code>1 let dist be a |V| × |V| array of minimum distances initialized to ∞ (infinity)
2 for each vertex v
3    dist[<span class="link_label">v</span>][<span class="link_reference">v</span>] ← 0
4 for each edge (u,v)
5    dist[<span class="link_label">u</span>][<span class="link_reference">v</span>] ← w(u,v)  // the weight of the edge (u,v)
6 for k from 1 to |V|
7    for i from 1 to |V|
8       for j from 1 to |V|
9          if dist[<span class="link_label">i</span>][<span class="link_reference">j</span>] &gt; dist[<span class="link_label">i</span>][<span class="link_reference">k</span>] + dist[<span class="link_label">k</span>][<span class="link_reference">j</span>] 
10             dist[<span class="link_label">i</span>][<span class="link_reference">j</span>] ← dist[<span class="link_label">i</span>][<span class="link_reference">k</span>] + dist[<span class="link_label">k</span>][<span class="link_reference">j</span>]
11         end if
</code></pre><h2 id="Path_reconstruction">Path reconstruction</h2><pre><code>let dist be a |V| × |V| <span class="keyword">array</span> <span class="keyword">of</span> minimum distances initialized <span class="keyword">to</span> ∞ (infinity)
let <span class="keyword">next</span> be a |V| × |V| <span class="keyword">array</span> <span class="keyword">of</span> vertex indices initialized <span class="keyword">to</span> <span class="keyword">null</span>

<span class="keyword">procedure</span> FloydWarshallWithPathReconstruction ()
   <span class="keyword">for</span> each edge (u,v)
      dist[u][v] ← w(u,v)  // the weight <span class="keyword">of</span> the edge (u,v)
      <span class="keyword">next</span>[u][v] ← v
   <span class="keyword">for</span> k from <span class="number">1</span> <span class="keyword">to</span> |V| // standard Floyd-Warshall implementation
      <span class="keyword">for</span> i from <span class="number">1</span> <span class="keyword">to</span> |V|
         <span class="keyword">for</span> j from <span class="number">1</span> <span class="keyword">to</span> |V|
            <span class="keyword">if</span> dist[i][k] + dist[k][j] &lt; dist[i][j] <span class="keyword">then</span>
               dist[i][j] ← dist[i][k] + dist[k][j]
               <span class="keyword">next</span>[i][j] ← <span class="keyword">next</span>[i][k]

<span class="keyword">procedure</span> Path(u, v)
   <span class="keyword">if</span> <span class="keyword">next</span>[u][v] = <span class="keyword">null</span> <span class="keyword">then</span>
       <span class="keyword">return</span> []
   path = [u]
   <span class="keyword">while</span> u ≠ v
       u ← <span class="keyword">next</span>[u][v]
       path.append(u)
   <span class="keyword">return</span> path
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>wiki 伪代码</p>
<h2 id="algorithm">algorithm</h2><pre><code>1 let dist be a |V| × |V| array of minimum distances initialized to ∞ (infinity)]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[binarysearchtree]]></title>
    <link href="http://yoursite.com/2015/04/30/binarysearchtree/"/>
    <id>http://yoursite.com/2015/04/30/binarysearchtree/</id>
    <published>2015-04-30T02:50:16.000Z</published>
    <updated>2015-04-30T02:50:58.000Z</updated>
    <content type="html"><![CDATA[<!-- the code is from https://gist.github.com/thinkphp/1450738 -->
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span><br><span class="line">   by Adrian Statescu &lt;adrian@thinkphp.ro&gt;</span><br><span class="line">   Twitter: @thinkphp</span><br><span class="line">   G+     : http://gplus.to/thinkphp</span><br><span class="line">   MIT Style License</span><br><span class="line">'''</span></span><br><span class="line"><span class="string">'''</span><br><span class="line">   Binary Search Tree</span><br><span class="line">   ------------------</span><br><span class="line"></span><br><span class="line">   Trees can come in many different shapes, and they can vary in the number of children allowed per node or in the way</span><br><span class="line">   they organize data values within the nodes. One of the most commonly used trees in computer science is the binary tree.</span><br><span class="line">   A binary tree is a tree in which each node can have at most two children. On child is identified as the left child and</span><br><span class="line">   the other as the right child. The topmost node of the tree is known as the root node.It provides the single acccess point</span><br><span class="line">   into the structure. The root node is the only node in the tree that does not have an incoming edge (an edge directed towart it)</span><br><span class="line">   By definition every non=empty tree must have contain a root node.</span><br><span class="line">  </span><br><span class="line">'''</span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span></span><br><span class="line"> </span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,info)</span>:</span> <span class="comment">#constructor of class</span></span><br><span class="line"> </span><br><span class="line">          self.info = info  <span class="comment">#information for node</span></span><br><span class="line">          self.left = <span class="keyword">None</span>  <span class="comment">#left leef</span></span><br><span class="line">          self.right = <span class="keyword">None</span> <span class="comment">#right leef</span></span><br><span class="line">          self.level = <span class="keyword">None</span> <span class="comment">#level none defined</span></span><br><span class="line"> </span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line"> </span><br><span class="line">          <span class="keyword">return</span> str(self.info) <span class="comment">#return as string</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">searchtree</span>:</span></span><br><span class="line"> </span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span> <span class="comment">#constructor of class</span></span><br><span class="line"> </span><br><span class="line">          self.root = <span class="keyword">None</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(self,val)</span>:</span>  <span class="comment">#create binary search tree nodes</span></span><br><span class="line"> </span><br><span class="line">          <span class="keyword">if</span> self.root == <span class="keyword">None</span>:</span><br><span class="line"> </span><br><span class="line">             self.root = Node(val)</span><br><span class="line"> </span><br><span class="line">          <span class="keyword">else</span>:</span><br><span class="line"> </span><br><span class="line">             current = self.root</span><br><span class="line"> </span><br><span class="line">             <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line"> </span><br><span class="line">                 <span class="keyword">if</span> val &lt; current.info:</span><br><span class="line"> </span><br><span class="line">                   <span class="keyword">if</span> current.left:</span><br><span class="line">                      current = current.left</span><br><span class="line">                   <span class="keyword">else</span>:</span><br><span class="line">                      current.left = Node(val)</span><br><span class="line">                      <span class="keyword">break</span>;      </span><br><span class="line"> </span><br><span class="line">                 <span class="keyword">elif</span> val &gt; current.info:</span><br><span class="line">                 </span><br><span class="line">                    <span class="keyword">if</span> current.right:</span><br><span class="line">                       current = current.right</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                       current.right = Node(val)</span><br><span class="line">                       <span class="keyword">break</span>;      </span><br><span class="line"> </span><br><span class="line">                 <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">break</span> </span><br><span class="line"> </span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">bft</span><span class="params">(self)</span>:</span> <span class="comment">#Breadth-First Traversal</span></span><br><span class="line"> </span><br><span class="line">          self.root.level = <span class="number">0</span> </span><br><span class="line">          queue = [self.root]</span><br><span class="line">          out = []</span><br><span class="line">          current_level = self.root.level</span><br><span class="line"> </span><br><span class="line">          <span class="keyword">while</span> len(queue) &gt; <span class="number">0</span>:</span><br><span class="line">                 </span><br><span class="line">             current_node = queue.pop(<span class="number">0</span>)</span><br><span class="line"> </span><br><span class="line">             <span class="keyword">if</span> current_node.level &gt; current_level:</span><br><span class="line">                current_level += <span class="number">1</span></span><br><span class="line">                out.append(<span class="string">"\n"</span>)</span><br><span class="line"> </span><br><span class="line">             out.append(str(current_node.info) + <span class="string">" "</span>)</span><br><span class="line"> </span><br><span class="line">             <span class="keyword">if</span> current_node.left:</span><br><span class="line"> </span><br><span class="line">                current_node.left.level = current_level + <span class="number">1</span></span><br><span class="line">                queue.append(current_node.left)</span><br><span class="line">                  </span><br><span class="line"> </span><br><span class="line">             <span class="keyword">if</span> current_node.right:</span><br><span class="line"> </span><br><span class="line">                current_node.right.level = current_level + <span class="number">1</span></span><br><span class="line">                queue.append(current_node.right)</span><br><span class="line">                      </span><br><span class="line">                 </span><br><span class="line">          <span class="keyword">print</span> <span class="string">""</span>.join(out)   </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">inorder</span><span class="params">(self,node)</span>:</span></span><br><span class="line">            </span><br><span class="line">           <span class="keyword">if</span> node <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">              </span><br><span class="line">              self.inorder(node.left)</span><br><span class="line">              <span class="keyword">print</span> node.info</span><br><span class="line">              self.inorder(node.right)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">preorder</span><span class="params">(self,node)</span>:</span></span><br><span class="line">            </span><br><span class="line">           <span class="keyword">if</span> node <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">              </span><br><span class="line">              <span class="keyword">print</span> node.info</span><br><span class="line">              self.preorder(node.left)</span><br><span class="line">              self.preorder(node.right)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">postorder</span><span class="params">(self,node)</span>:</span></span><br><span class="line">            </span><br><span class="line">           <span class="keyword">if</span> node <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">              </span><br><span class="line">              self.postorder(node.left)</span><br><span class="line">              self.postorder(node.right)</span><br><span class="line">              <span class="keyword">print</span> node.info</span><br><span class="line"> </span><br><span class="line">                        </span><br><span class="line">tree = searchtree()     </span><br><span class="line">arr = [<span class="number">8</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">10</span>,<span class="number">14</span>,<span class="number">13</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> arr:</span><br><span class="line">    tree.create(i)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'Breadth-First Traversal'</span></span><br><span class="line">tree.bft()</span><br><span class="line"><span class="keyword">print</span> <span class="string">'Inorder Traversal'</span></span><br><span class="line">tree.inorder(tree.root) </span><br><span class="line"><span class="keyword">print</span> <span class="string">'Preorder Traversal'</span></span><br><span class="line">tree.preorder(tree.root) </span><br><span class="line"><span class="keyword">print</span> <span class="string">'Postorder Traversal'</span></span><br><span class="line">tree.postorder(tree.root)</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<!-- the code is from https://gist.github.com/thinkphp/1450738 -->
<figure class="highlight python"><table><tr><td class="gutter"><pre><span]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[btree]]></title>
    <link href="http://yoursite.com/2015/04/30/btree/"/>
    <id>http://yoursite.com/2015/04/30/btree/</id>
    <published>2015-04-30T02:46:13.000Z</published>
    <updated>2015-04-30T02:48:46.000Z</updated>
    <content type="html"><![CDATA[<!--the code is from https://gist.github.com/teepark/572734 -->
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> bisect</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">import</span> operator</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_BNode</span><span class="params">(object)</span>:</span></span><br><span class="line">    __slots__ = [<span class="string">"tree"</span>, <span class="string">"contents"</span>, <span class="string">"children"</span>]</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, tree, contents=None, children=None)</span>:</span></span><br><span class="line">        self.tree = tree</span><br><span class="line">        self.contents = contents <span class="keyword">or</span> []</span><br><span class="line">        self.children = children <span class="keyword">or</span> []</span><br><span class="line">        <span class="keyword">if</span> self.children:</span><br><span class="line">            <span class="keyword">assert</span> len(self.contents) + <span class="number">1</span> == len(self.children), \</span><br><span class="line">                    <span class="string">"one more child than data item required"</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        name = getattr(self, <span class="string">"children"</span>, <span class="number">0</span>) <span class="keyword">and</span> <span class="string">"Branch"</span> <span class="keyword">or</span> <span class="string">"Leaf"</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&lt;%s %s&gt;"</span> % (name, <span class="string">", "</span>.join(map(str, self.contents)))</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lateral</span><span class="params">(self, parent, parent_index, dest, dest_index)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> parent_index &gt; dest_index:</span><br><span class="line">            dest.contents.append(parent.contents[dest_index])</span><br><span class="line">            parent.contents[dest_index] = self.contents.pop(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">if</span> self.children:</span><br><span class="line">                dest.children.append(self.children.pop(<span class="number">0</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            dest.contents.insert(<span class="number">0</span>, parent.contents[parent_index])</span><br><span class="line">            parent.contents[parent_index] = self.contents.pop()</span><br><span class="line">            <span class="keyword">if</span> self.children:</span><br><span class="line">                dest.children.insert(<span class="number">0</span>, self.children.pop())</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">shrink</span><span class="params">(self, ancestors)</span>:</span></span><br><span class="line">        parent = <span class="keyword">None</span></span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> ancestors:</span><br><span class="line">            parent, parent_index = ancestors.pop()</span><br><span class="line">            <span class="comment"># try to lend to the left neighboring sibling</span></span><br><span class="line">            <span class="keyword">if</span> parent_index:</span><br><span class="line">                left_sib = parent.children[parent_index - <span class="number">1</span>]</span><br><span class="line">                <span class="keyword">if</span> len(left_sib.contents) &lt; self.tree.order:</span><br><span class="line">                    self.lateral(</span><br><span class="line">                            parent, parent_index, left_sib, parent_index - <span class="number">1</span>)</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line"> </span><br><span class="line">            <span class="comment"># try the right neighbor</span></span><br><span class="line">            <span class="keyword">if</span> parent_index + <span class="number">1</span> &lt; len(parent.children):</span><br><span class="line">                right_sib = parent.children[parent_index + <span class="number">1</span>]</span><br><span class="line">                <span class="keyword">if</span> len(right_sib.contents) &lt; self.tree.order:</span><br><span class="line">                    self.lateral(</span><br><span class="line">                            parent, parent_index, right_sib, parent_index + <span class="number">1</span>)</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line"> </span><br><span class="line">        center = len(self.contents) // <span class="number">2</span></span><br><span class="line">        sibling, push = self.split()</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> parent:</span><br><span class="line">            parent, parent_index = self.tree.BRANCH(</span><br><span class="line">                    self.tree, children=[self]), <span class="number">0</span></span><br><span class="line">            self.tree._root = parent</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># pass the median up to the parent</span></span><br><span class="line">        parent.contents.insert(parent_index, push)</span><br><span class="line">        parent.children.insert(parent_index + <span class="number">1</span>, sibling)</span><br><span class="line">        <span class="keyword">if</span> len(parent.contents) &gt; parent.tree.order:</span><br><span class="line">            parent.shrink(ancestors)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">grow</span><span class="params">(self, ancestors)</span>:</span></span><br><span class="line">        parent, parent_index = ancestors.pop()</span><br><span class="line"> </span><br><span class="line">        minimum = self.tree.order // <span class="number">2</span></span><br><span class="line">        left_sib = right_sib = <span class="keyword">None</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment"># try to borrow from the right sibling</span></span><br><span class="line">        <span class="keyword">if</span> parent_index + <span class="number">1</span> &lt; len(parent.children):</span><br><span class="line">            right_sib = parent.children[parent_index + <span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> len(right_sib.contents) &gt; minimum:</span><br><span class="line">                right_sib.lateral(parent, parent_index + <span class="number">1</span>, self, parent_index)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment"># try to borrow from the left sibling</span></span><br><span class="line">        <span class="keyword">if</span> parent_index:</span><br><span class="line">            left_sib = parent.children[parent_index - <span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> len(left_sib.contents) &gt; minimum:</span><br><span class="line">                left_sib.lateral(parent, parent_index - <span class="number">1</span>, self, parent_index)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment"># consolidate with a sibling - try left first</span></span><br><span class="line">        <span class="keyword">if</span> left_sib:</span><br><span class="line">            left_sib.contents.append(parent.contents[parent_index - <span class="number">1</span>])</span><br><span class="line">            left_sib.contents.extend(self.contents)</span><br><span class="line">            <span class="keyword">if</span> self.children:</span><br><span class="line">                left_sib.children.extend(self.children)</span><br><span class="line">            parent.contents.pop(parent_index - <span class="number">1</span>)</span><br><span class="line">            parent.children.pop(parent_index)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.contents.append(parent.contents[parent_index])</span><br><span class="line">            self.contents.extend(right_sib.contents)</span><br><span class="line">            <span class="keyword">if</span> self.children:</span><br><span class="line">                self.children.extend(right_sib.children)</span><br><span class="line">            parent.contents.pop(parent_index)</span><br><span class="line">            parent.children.pop(parent_index + <span class="number">1</span>)</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> len(parent.contents) &lt; minimum:</span><br><span class="line">            <span class="keyword">if</span> ancestors:</span><br><span class="line">                <span class="comment"># parent is not the root</span></span><br><span class="line">                parent.grow(ancestors)</span><br><span class="line">            <span class="keyword">elif</span> <span class="keyword">not</span> parent.contents:</span><br><span class="line">                <span class="comment"># parent is root, and its now empty</span></span><br><span class="line">                self.tree._root = left_sib <span class="keyword">or</span> self</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">split</span><span class="params">(self)</span>:</span></span><br><span class="line">        center = len(self.contents) // <span class="number">2</span></span><br><span class="line">        median = self.contents[center]</span><br><span class="line">        sibling = type(self)(</span><br><span class="line">                self.tree,</span><br><span class="line">                self.contents[center + <span class="number">1</span>:],</span><br><span class="line">                self.children[center + <span class="number">1</span>:])</span><br><span class="line">        self.contents = self.contents[:center]</span><br><span class="line">        self.children = self.children[:center + <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> sibling, median</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, index, item, ancestors)</span>:</span></span><br><span class="line">        self.contents.insert(index, item)</span><br><span class="line">        <span class="keyword">if</span> len(self.contents) &gt; self.tree.order:</span><br><span class="line">            self.shrink(ancestors)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(self, index, ancestors)</span>:</span></span><br><span class="line">        minimum = self.tree.order // <span class="number">2</span></span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> self.children:</span><br><span class="line">            <span class="comment"># try promoting from the right subtree first,</span></span><br><span class="line">            <span class="comment"># but only if it won't have to resize</span></span><br><span class="line">            additional_ancestors = [(self, index + <span class="number">1</span>)]</span><br><span class="line">            descendent = self.children[index + <span class="number">1</span>]</span><br><span class="line">            <span class="keyword">while</span> descendent.children:</span><br><span class="line">                additional_ancestors.append((descendent, <span class="number">0</span>))</span><br><span class="line">                descendent = descendent.children[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">if</span> len(descendent.contents) &gt; minimum:</span><br><span class="line">                ancestors.extend(additional_ancestors)</span><br><span class="line">                self.contents[index] = descendent.contents[<span class="number">0</span>]</span><br><span class="line">                descendent.remove(<span class="number">0</span>, ancestors)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"> </span><br><span class="line">            <span class="comment"># fall back to the left child</span></span><br><span class="line">            additional_ancestors = [(self, index)]</span><br><span class="line">            descendent = self.children[index]</span><br><span class="line">            <span class="keyword">while</span> descendent.children:</span><br><span class="line">                additional_ancestors.append(</span><br><span class="line">                        (descendent, len(descendent.children) - <span class="number">1</span>))</span><br><span class="line">                descendent = descendent.children[-<span class="number">1</span>]</span><br><span class="line">            ancestors.extend(additional_ancestors)</span><br><span class="line">            self.contents[index] = descendent.contents[-<span class="number">1</span>]</span><br><span class="line">            descendent.remove(len(descendent.children) - <span class="number">1</span>, ancestors)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.contents.pop(index)</span><br><span class="line">            <span class="keyword">if</span> len(self.contents) &lt; minimum <span class="keyword">and</span> ancestors:</span><br><span class="line">                self.grow(ancestors)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_BPlusLeaf</span><span class="params">(_BNode)</span>:</span></span><br><span class="line">    __slots__ = [<span class="string">"tree"</span>, <span class="string">"contents"</span>, <span class="string">"data"</span>, <span class="string">"next"</span>]</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, tree, contents=None, data=None, next=None)</span>:</span></span><br><span class="line">        self.tree = tree</span><br><span class="line">        self.contents = contents <span class="keyword">or</span> []</span><br><span class="line">        self.data = data <span class="keyword">or</span> []</span><br><span class="line">        self.next = next</span><br><span class="line">        <span class="keyword">assert</span> len(self.contents) == len(self.data), <span class="string">"one data per key"</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, index, key, data, ancestors)</span>:</span></span><br><span class="line">        self.contents.insert(index, key)</span><br><span class="line">        self.data.insert(index, data)</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> len(self.contents) &gt; self.tree.order:</span><br><span class="line">            self.shrink(ancestors)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lateral</span><span class="params">(self, parent, parent_index, dest, dest_index)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> parent_index &gt; dest_index:</span><br><span class="line">            dest.contents.append(self.contents.pop(<span class="number">0</span>))</span><br><span class="line">            dest.data.append(self.data.pop(<span class="number">0</span>))</span><br><span class="line">            parent.contents[dest_index] = self.contents[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            dest.contents.insert(<span class="number">0</span>, self.contents.pop())</span><br><span class="line">            dest.data.insert(<span class="number">0</span>, self.data.pop())</span><br><span class="line">            parent.contents[parent_index] = dest.contents[<span class="number">0</span>]</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">split</span><span class="params">(self)</span>:</span></span><br><span class="line">        center = len(self.contents) // <span class="number">2</span></span><br><span class="line">        median = self.contents[center - <span class="number">1</span>]</span><br><span class="line">        sibling = type(self)(</span><br><span class="line">                self.tree,</span><br><span class="line">                self.contents[center:],</span><br><span class="line">                self.data[center:],</span><br><span class="line">                self.next)</span><br><span class="line">        self.contents = self.contents[:center]</span><br><span class="line">        self.data = self.data[:center]</span><br><span class="line">        self.next = sibling</span><br><span class="line">        <span class="keyword">return</span> sibling, sibling.contents[<span class="number">0</span>]</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(self, index, ancestors)</span>:</span></span><br><span class="line">        minimum = self.tree.order // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> index &gt;= len(self.contents):</span><br><span class="line">            self, index = self.next, <span class="number">0</span></span><br><span class="line"> </span><br><span class="line">        key = self.contents[index]</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># if any leaf that could accept the key can do so</span></span><br><span class="line">        <span class="comment"># without any rebalancing necessary, then go that route</span></span><br><span class="line">        current = self</span><br><span class="line">        <span class="keyword">while</span> current <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">and</span> current.contents[<span class="number">0</span>] == key:</span><br><span class="line">            <span class="keyword">if</span> len(current.contents) &gt; minimum:</span><br><span class="line">                <span class="keyword">if</span> current.contents[<span class="number">0</span>] == key:</span><br><span class="line">                    index = <span class="number">0</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    index = bisect.bisect_left(current.contents, key)</span><br><span class="line">                current.contents.pop(index)</span><br><span class="line">                current.data.pop(index)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            current = current.next</span><br><span class="line"> </span><br><span class="line">        self.grow(ancestors)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">grow</span><span class="params">(self, ancestors)</span>:</span></span><br><span class="line">        minimum = self.tree.order // <span class="number">2</span></span><br><span class="line">        parent, parent_index = ancestors.pop()</span><br><span class="line">        left_sib = right_sib = <span class="keyword">None</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment"># try borrowing from a neighbor - try right first</span></span><br><span class="line">        <span class="keyword">if</span> parent_index + <span class="number">1</span> &lt; len(parent.children):</span><br><span class="line">            right_sib = parent.children[parent_index + <span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> len(right_sib.contents) &gt; minimum:</span><br><span class="line">                right_sib.lateral(parent, parent_index + <span class="number">1</span>, self, parent_index)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment"># fallback to left</span></span><br><span class="line">        <span class="keyword">if</span> parent_index:</span><br><span class="line">            left_sib = parent.children[parent_index - <span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> len(left_sib.contents) &gt; minimum:</span><br><span class="line">                left_sib.lateral(parent, parent_index - <span class="number">1</span>, self, parent_index)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment"># join with a neighbor - try left first</span></span><br><span class="line">        <span class="keyword">if</span> left_sib:</span><br><span class="line">            left_sib.contents.extend(self.contents)</span><br><span class="line">            left_sib.data.extend(self.data)</span><br><span class="line">            parent.remove(parent_index - <span class="number">1</span>, ancestors)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment"># fallback to right</span></span><br><span class="line">        self.contents.extend(right_sib.contents)</span><br><span class="line">        self.data.extend(right_sib.data)</span><br><span class="line">        parent.remove(parent_index, ancestors)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BTree</span><span class="params">(object)</span>:</span></span><br><span class="line">    BRANCH = LEAF = _BNode</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, order)</span>:</span></span><br><span class="line">        self.order = order</span><br><span class="line">        self._root = self._bottom = self.LEAF(self)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_path_to</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        current = self._root</span><br><span class="line">        ancestry = []</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">while</span> getattr(current, <span class="string">"children"</span>, <span class="keyword">None</span>):</span><br><span class="line">            index = bisect.bisect_left(current.contents, item)</span><br><span class="line">            ancestry.append((current, index))</span><br><span class="line">            <span class="keyword">if</span> index &lt; len(current.contents) \</span><br><span class="line">                    <span class="keyword">and</span> current.contents[index] == item:</span><br><span class="line">                <span class="keyword">return</span> ancestry</span><br><span class="line">            current = current.children[index]</span><br><span class="line"> </span><br><span class="line">        index = bisect.bisect_left(current.contents, item)</span><br><span class="line">        ancestry.append((current, index))</span><br><span class="line">        present = index &lt; len(current.contents)</span><br><span class="line">        present = present <span class="keyword">and</span> current.contents[index] == item</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> ancestry</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_present</span><span class="params">(self, item, ancestors)</span>:</span></span><br><span class="line">        last, index = ancestors[-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> index &lt; len(last.contents) <span class="keyword">and</span> last.contents[index] == item</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        current = self._root</span><br><span class="line">        ancestors = self._path_to(item)</span><br><span class="line">        node, index = ancestors[-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">while</span> getattr(node, <span class="string">"children"</span>, <span class="keyword">None</span>):</span><br><span class="line">            node = node.children[index]</span><br><span class="line">            index = bisect.bisect_left(node.contents, item)</span><br><span class="line">            ancestors.append((node, index))</span><br><span class="line">        node, index = ancestors.pop()</span><br><span class="line">        node.insert(index, item, ancestors)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        current = self._root</span><br><span class="line">        ancestors = self._path_to(item)</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> self._present(item, ancestors):</span><br><span class="line">            node, index = ancestors.pop()</span><br><span class="line">            node.remove(index, ancestors)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">"%r not in %s"</span> % (item, self.__class__.__name__))</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__contains__</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._present(item, self._path_to(item))</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">_recurse</span><span class="params">(node)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> node.children:</span><br><span class="line">                <span class="keyword">for</span> child, item <span class="keyword">in</span> zip(node.children, node.contents):</span><br><span class="line">                    <span class="keyword">for</span> child_item <span class="keyword">in</span> _recurse(child):</span><br><span class="line">                        <span class="keyword">yield</span> child_item</span><br><span class="line">                    <span class="keyword">yield</span> item</span><br><span class="line">                <span class="keyword">for</span> child_item <span class="keyword">in</span> _recurse(node.children[-<span class="number">1</span>]):</span><br><span class="line">                    <span class="keyword">yield</span> child_item</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">for</span> item <span class="keyword">in</span> node.contents:</span><br><span class="line">                    <span class="keyword">yield</span> item</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> _recurse(self._root):</span><br><span class="line">            <span class="keyword">yield</span> item</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">recurse</span><span class="params">(node, accum, depth)</span>:</span></span><br><span class="line">            accum.append((<span class="string">"  "</span> * depth) + repr(node))</span><br><span class="line">            <span class="keyword">for</span> node <span class="keyword">in</span> getattr(node, <span class="string">"children"</span>, []):</span><br><span class="line">                recurse(node, accum, depth + <span class="number">1</span>)</span><br><span class="line"> </span><br><span class="line">        accum = []</span><br><span class="line">        recurse(self._root, accum, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"\n"</span>.join(accum)</span><br><span class="line"> </span><br><span class="line">    <span class="decorator">@classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bulkload</span><span class="params">(cls, items, order)</span>:</span></span><br><span class="line">        tree = object.__new__(cls)</span><br><span class="line">        tree.order = order</span><br><span class="line"> </span><br><span class="line">        leaves = tree._build_bulkloaded_leaves(items)</span><br><span class="line">        tree._build_bulkloaded_branches(leaves)</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> tree</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_build_bulkloaded_leaves</span><span class="params">(self, items)</span>:</span></span><br><span class="line">        minimum = self.order // <span class="number">2</span></span><br><span class="line">        leaves, seps = [[]], []</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">            <span class="keyword">if</span> len(leaves[-<span class="number">1</span>]) &lt; self.order:</span><br><span class="line">                leaves[-<span class="number">1</span>].append(item)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                seps.append(item)</span><br><span class="line">                leaves.append([])</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> len(leaves[-<span class="number">1</span>]) &lt; minimum <span class="keyword">and</span> seps:</span><br><span class="line">            last_two = leaves[-<span class="number">2</span>] + [seps.pop()] + leaves[-<span class="number">1</span>]</span><br><span class="line">            leaves[-<span class="number">2</span>] = last_two[:minimum]</span><br><span class="line">            leaves[-<span class="number">1</span>] = last_two[minimum + <span class="number">1</span>:]</span><br><span class="line">            seps.append(last_two[minimum])</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> [self.LEAF(self, contents=node) <span class="keyword">for</span> node <span class="keyword">in</span> leaves], seps</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_build_bulkloaded_branches</span><span class="params">(self, <span class="params">(leaves, seps)</span>)</span>:</span></span><br><span class="line">        minimum = self.order // <span class="number">2</span></span><br><span class="line">        levels = [leaves]</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">while</span> len(seps) &gt; self.order + <span class="number">1</span>:</span><br><span class="line">            items, nodes, seps = seps, [[]], []</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">                <span class="keyword">if</span> len(nodes[-<span class="number">1</span>]) &lt; self.order:</span><br><span class="line">                    nodes[-<span class="number">1</span>].append(item)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    seps.append(item)</span><br><span class="line">                    nodes.append([])</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span> len(nodes[-<span class="number">1</span>]) &lt; minimum <span class="keyword">and</span> seps:</span><br><span class="line">                last_two = nodes[-<span class="number">2</span>] + [seps.pop()] + nodes[-<span class="number">1</span>]</span><br><span class="line">                nodes[-<span class="number">2</span>] = last_two[:minimum]</span><br><span class="line">                nodes[-<span class="number">1</span>] = last_two[minimum + <span class="number">1</span>:]</span><br><span class="line">                seps.append(last_two[minimum])</span><br><span class="line"> </span><br><span class="line">            offset = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> i, node <span class="keyword">in</span> enumerate(nodes):</span><br><span class="line">                children = levels[-<span class="number">1</span>][offset:offset + len(node) + <span class="number">1</span>]</span><br><span class="line">                nodes[i] = self.BRANCH(self, contents=node, children=children)</span><br><span class="line">                offset += len(node) + <span class="number">1</span></span><br><span class="line"> </span><br><span class="line">            levels.append(nodes)</span><br><span class="line"> </span><br><span class="line">        self._root = self.BRANCH(self, contents=seps, children=levels[-<span class="number">1</span>])</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BPlusTree</span><span class="params">(BTree)</span>:</span></span><br><span class="line">    LEAF = _BPlusLeaf</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_get</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        node, index = self._path_to(key)[-<span class="number">1</span>]</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> index == len(node.contents):</span><br><span class="line">            <span class="keyword">if</span> node.next:</span><br><span class="line">                node, index = node.next, <span class="number">0</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"> </span><br><span class="line">        <span class="keyword">while</span> node.contents[index] == key:</span><br><span class="line">            <span class="keyword">yield</span> node.data[index]</span><br><span class="line">            index += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> index == len(node.contents):</span><br><span class="line">                <span class="keyword">if</span> node.next:</span><br><span class="line">                    node, index = node.next, <span class="number">0</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_path_to</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        path = super(BPlusTree, self)._path_to(item)</span><br><span class="line">        node, index = path[-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">while</span> hasattr(node, <span class="string">"children"</span>):</span><br><span class="line">            node = node.children[index]</span><br><span class="line">            index = bisect.bisect_left(node.contents, item)</span><br><span class="line">            path.append((node, index))</span><br><span class="line">        <span class="keyword">return</span> path</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, key, default=None)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> self._get(key).next()</span><br><span class="line">        <span class="keyword">except</span> StopIteration:</span><br><span class="line">            <span class="keyword">return</span> default</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getlist</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> list(self._get(key))</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, key, data)</span>:</span></span><br><span class="line">        path = self._path_to(key)</span><br><span class="line">        node, index = path.pop()</span><br><span class="line">        node.insert(index, key, data, path)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        path = self._path_to(key)</span><br><span class="line">        node, index = path.pop()</span><br><span class="line">        node.remove(index, path)</span><br><span class="line"> </span><br><span class="line">    __getitem__ = get</span><br><span class="line">    __setitem__ = insert</span><br><span class="line">    __delitem__ = remove</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__contains__</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> self._get(key):</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">iteritems</span><span class="params">(self)</span>:</span></span><br><span class="line">        node = self._root</span><br><span class="line">        <span class="keyword">while</span> hasattr(node, <span class="string">"children"</span>):</span><br><span class="line">            node = node.children[<span class="number">0</span>]</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">while</span> node:</span><br><span class="line">            <span class="keyword">for</span> pair <span class="keyword">in</span> itertools.izip(node.contents, node.data):</span><br><span class="line">                <span class="keyword">yield</span> pair</span><br><span class="line">            node = node.next</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">iterkeys</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> itertools.imap(operator.itemgetter(<span class="number">0</span>), self.iteritems())</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">itervalues</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> itertools.imap(operator.itemgetter(<span class="number">1</span>), self.iteritems())</span><br><span class="line"> </span><br><span class="line">    __iter__ = iterkeys</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">items</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> list(self.iteritems())</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">keys</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> list(self.iterkeys())</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">values</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> list(self.itervalues())</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_build_bulkloaded_leaves</span><span class="params">(self, items)</span>:</span></span><br><span class="line">        minimum = self.order // <span class="number">2</span></span><br><span class="line">        leaves, seps = [[]], []</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">            <span class="keyword">if</span> len(leaves[-<span class="number">1</span>]) &gt;= self.order:</span><br><span class="line">                seps.append(item)</span><br><span class="line">                leaves.append([])</span><br><span class="line">            leaves[-<span class="number">1</span>].append(item)</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> len(leaves[-<span class="number">1</span>]) &lt; minimum <span class="keyword">and</span> seps:</span><br><span class="line">            last_two = leaves[-<span class="number">2</span>] + leaves[-<span class="number">1</span>]</span><br><span class="line">            leaves[-<span class="number">2</span>] = last_two[:minimum]</span><br><span class="line">            leaves[-<span class="number">1</span>] = last_two[minimum:]</span><br><span class="line">            seps.append(last_two[minimum])</span><br><span class="line"> </span><br><span class="line">        leaves = [self.LEAF(</span><br><span class="line">                self,</span><br><span class="line">                contents=[p[<span class="number">0</span>] <span class="keyword">for</span> p <span class="keyword">in</span> pairs],</span><br><span class="line">                data=[p[<span class="number">1</span>] <span class="keyword">for</span> p <span class="keyword">in</span> pairs])</span><br><span class="line">            <span class="keyword">for</span> pairs <span class="keyword">in</span> leaves]</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(len(leaves) - <span class="number">1</span>):</span><br><span class="line">            leaves[i].next = leaves[i + <span class="number">1</span>]</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> leaves, [s[<span class="number">0</span>] <span class="keyword">for</span> s <span class="keyword">in</span> seps]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BTreeTests</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_additions</span><span class="params">(self)</span>:</span></span><br><span class="line">        bt = BTree(<span class="number">20</span>)</span><br><span class="line">        l = range(<span class="number">2000</span>)</span><br><span class="line">        <span class="keyword">for</span> i, item <span class="keyword">in</span> enumerate(l):</span><br><span class="line">            bt.insert(item)</span><br><span class="line">            self.assertEqual(list(bt), l[:i + <span class="number">1</span>])</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_bulkloads</span><span class="params">(self)</span>:</span></span><br><span class="line">        bt = BTree.bulkload(range(<span class="number">2000</span>), <span class="number">20</span>)</span><br><span class="line">        self.assertEqual(list(bt), range(<span class="number">2000</span>))</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_removals</span><span class="params">(self)</span>:</span></span><br><span class="line">        bt = BTree(<span class="number">20</span>)</span><br><span class="line">        l = range(<span class="number">2000</span>)</span><br><span class="line">        map(bt.insert, l)</span><br><span class="line">        rand = l[:]</span><br><span class="line">        random.shuffle(rand)</span><br><span class="line">        <span class="keyword">while</span> l:</span><br><span class="line">            self.assertEqual(list(bt), l)</span><br><span class="line">            rem = rand.pop()</span><br><span class="line">            l.remove(rem)</span><br><span class="line">            bt.remove(rem)</span><br><span class="line">        self.assertEqual(list(bt), l)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_insert_regression</span><span class="params">(self)</span>:</span></span><br><span class="line">        bt = BTree.bulkload(range(<span class="number">2000</span>), <span class="number">50</span>)</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">100000</span>):</span><br><span class="line">            bt.insert(random.randrange(<span class="number">2000</span>))</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BPlusTreeTests</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_additions_sorted</span><span class="params">(self)</span>:</span></span><br><span class="line">        bt = BPlusTree(<span class="number">20</span>)</span><br><span class="line">        l = range(<span class="number">2000</span>)</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> l:</span><br><span class="line">            bt.insert(item, str(item))</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> l:</span><br><span class="line">            self.assertEqual(str(item), bt[item])</span><br><span class="line"> </span><br><span class="line">        self.assertEqual(l, list(bt))</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_additions_random</span><span class="params">(self)</span>:</span></span><br><span class="line">        bt = BPlusTree(<span class="number">20</span>)</span><br><span class="line">        l = range(<span class="number">2000</span>)</span><br><span class="line">        random.shuffle(l)</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> l:</span><br><span class="line">            bt.insert(item, str(item))</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> l:</span><br><span class="line">            self.assertEqual(str(item), bt[item])</span><br><span class="line"> </span><br><span class="line">        self.assertEqual(range(<span class="number">2000</span>), list(bt))</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_bulkload</span><span class="params">(self)</span>:</span></span><br><span class="line">        bt = BPlusTree.bulkload(zip(range(<span class="number">2000</span>), map(str, range(<span class="number">2000</span>))), <span class="number">20</span>)</span><br><span class="line"> </span><br><span class="line">        self.assertEqual(list(bt), range(<span class="number">2000</span>))</span><br><span class="line"> </span><br><span class="line">        self.assertEqual(</span><br><span class="line">                list(bt.iteritems()),</span><br><span class="line">                zip(range(<span class="number">2000</span>), map(str, range(<span class="number">2000</span>))))</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<!--the code is from https://gist.github.com/teepark/572734 -->
<figure class="highlight python"><table><tr><td class="gutter"><pre><span cl]]>
    </summary>
    
      <category term="btree" scheme="http://yoursite.com/tags/btree/"/>
    
      <category term="data structure" scheme="http://yoursite.com/tags/data-structure/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[BellmanFord]]></title>
    <link href="http://yoursite.com/2015/04/29/BellmanFord/"/>
    <id>http://yoursite.com/2015/04/29/BellmanFord/</id>
    <published>2015-04-29T11:30:43.000Z</published>
    <updated>2015-04-29T12:12:09.000Z</updated>
    <content type="html"><![CDATA[<p>按照维基百科的说法，BellmanFord 算法也是用来处理单源最短路径问题的，但是和 dijkstra 算法不同的是，它可以处理负的权值。</p>
<p>仔细观察wiki 的伪代码发现，虽然第二步都是用了2重循环，但是 dijkstra 算法是优先选择了最小的边所在点。即：当探索完 src 的所有边，并更新了所有对应的 v 时，会选择剩下未探索的最小的 v 作为下一个 src。<br>BellmanFord 没有做这些处理。</p>
<p>导致 dijkstra 不能处理负权，原因在于Dijkstra的贪心算法的本质是如下条件要成立：<br>如果存在某条路径p,使得p是从顶点u到v的最短路径：$p = u-&gt;v_1 -&gt; v_2 \cdots -&gt;v_n-&gt;v$,则对于任意的$1\leq k \leq n$,需要满足 $ d(u,v_k)&lt;d(u,v) $。</p>
<h2 id="算法导论伪代码">算法导论伪代码</h2><pre><code>BELLMAN-FORD(<span class="keyword">G</span>, w, s)
1  INITIALIZE-SINGLE-SOURCE(<span class="keyword">G</span>, s)
2  <span class="keyword">for</span> i ← 1 to |V[<span class="keyword">G</span>]| - 1
3       <span class="keyword">do</span> <span class="keyword">for</span> each edge (<span class="keyword">u</span>, v) ∈ <span class="keyword">E</span>[<span class="keyword">G</span>]
4              <span class="keyword">do</span> RELAX(<span class="keyword">u</span>, v, w)
5  <span class="keyword">for</span> each edge (<span class="keyword">u</span>, v) ∈ <span class="keyword">E</span>[<span class="keyword">G</span>]
6       <span class="keyword">do</span> <span class="keyword">if</span> <span class="keyword">d</span>[v] &gt; <span class="keyword">d</span>[<span class="keyword">u</span>] + <span class="literal">w</span>(<span class="keyword">u</span>, v)
7             then <span class="keyword">return</span> FALSE
8  <span class="keyword">return</span> TRUE
</code></pre><h2 id="wiki_伪代码">wiki 伪代码</h2><pre><code><span class="function"><span class="keyword">function</span> <span class="title">BellmanFord</span>(<span class="title">list</span> <span class="title">vertices</span>, <span class="title">list</span> <span class="title">edges</span>, <span class="title">vertex</span> <span class="title">source</span>)</span>
   ::distance[],predecessor[]

  <span class="comment"> // This implementation takes in a graph, represented as</span>
  <span class="comment"> // lists of vertices and edges, and fills two arrays</span>
  <span class="comment"> // (distance and predecessor) with shortest-path</span>
  <span class="comment"> // (less cost/distance/metric) information</span>

  <span class="comment"> // Step 1: initialize graph</span>
   <span class="keyword">for</span> <span class="keyword">each</span> vertex v <span class="operator">in</span> vertices:
       <span class="keyword">if</span> v is source <span class="keyword">then</span> distance[v] := <span class="number">0</span>
       <span class="keyword">else</span> distance[v] := inf
       predecessor[v] := <span class="constant">null</span>

  <span class="comment"> // Step 2: relax edges repeatedly</span>
   <span class="keyword">for</span> i <span class="built_in">from</span> <span class="number">1</span> <span class="built_in">to</span> size(vertices)-<span class="number">1</span>:
       <span class="keyword">for</span> <span class="keyword">each</span> edge (u, v) <span class="operator">with</span> weight w <span class="operator">in</span> edges:
           <span class="keyword">if</span> distance[u] + w &lt; distance[v]:
               distance[v] := distance[u] + w
               predecessor[v] := u

  <span class="comment"> // Step 3: check for negative-weight cycles</span>
   <span class="keyword">for</span> <span class="keyword">each</span> edge (u, v) <span class="operator">with</span> weight w <span class="operator">in</span> edges:
       <span class="keyword">if</span> distance[u] + w &lt; distance[v]:
           error <span class="string">"Graph contains a negative-weight cycle"</span>
   <span class="constant">return</span> distance[], predecessor[]
</code></pre><p>补充:<br>考虑：为什么要循环V-1次？<br>答：因为最短路径肯定是个简单路径，不可能包含回路的，<br>如果包含回路，且回路的权值和为正的，那么去掉这个回路，可以得到更短的路径<br>如果回路的权值是负的，那么肯定没有解了</p>
<p>图有n个点，又不能有回路<br>所以最短路径最多n-1边</p>
<p>又因为每次循环，至少relax一边<br>所以最多n-1次就行了</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>按照维基百科的说法，BellmanFord 算法也是用来处理单源最短路径问题的，但是和 dijkstra 算法不同的是，它可以处理负的权值。</p>
<p>仔细观察wiki 的伪代码发现，虽然第二步都是用了2重循环，但是 dijkstra 算法是优先选择了最小的边所在点。即]]>
    </summary>
    
      <category term="algorithms" scheme="http://yoursite.com/tags/algorithms/"/>
    
      <category term="graph" scheme="http://yoursite.com/tags/graph/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[dijkstra 算法]]></title>
    <link href="http://yoursite.com/2015/04/29/dijkstra/"/>
    <id>http://yoursite.com/2015/04/29/dijkstra/</id>
    <published>2015-04-29T10:46:15.000Z</published>
    <updated>2015-04-29T11:15:47.000Z</updated>
    <content type="html"><![CDATA[<p>输入图 G，初始点src<br>输出：初始点到所有点得最短路径</p>
<p>思路：<br>1.初始化，用字典表示，将所有点放入字典distance,distance[src] = 0,<br>其余点设为 inf 。<br>distance[v] 表示src 到 v 的当前最短距离。<br>并设所有点为未访问过的 unvisited。</p>
<p>2.探索和 src 相邻的边，更新 src 相邻顶点 v 的值：<br>如果 distance[src]+weight[src][v] &lt; distance[v] ,就更新 distance[v]<br>且更新 unvisited[v]的距离</p>
<p>3.将 src 的相邻边全部探索完毕后，<br>     将 src 设置为访问过的。（将 src 从 unvisited 中弹出）</p>
<p>4.从剩下的unvisited 中，选取最小的顶点作为新的 src<br>这里有个小技巧(python): src = min(unvisited，<strong>key=unvisited.get</strong>).</p>
<p>5.重复直到 unvisited 为空。</p>
<p>个人理解这里的关键是：<strong>直到 src 的相邻边都探索完毕后，才将 src 设置为访问过的</strong></p>
<p>之前从 src 更新 distance[v] 的值的时候，就把 v 设置成访问过的，这样是错的，因为可能还有从其他点来更新 distance[v].</p>
<p>下面附上 wiki 伪代码和自己写得 python 代码</p>
<pre><code> <span class="number">1</span>  <span class="function"><span class="keyword">function</span> <span class="title">Dijkstra</span><span class="params">(Graph, source)</span>:</span>
 <span class="number">2</span>
 <span class="number">3</span>      dist[source] ← <span class="number">0</span>                       <span class="comment">// Distance from source to source</span>
 <span class="number">4</span>      prev[source] ← undefined               <span class="comment">// Previous node in optimal path initialization</span>
 <span class="number">5</span>
 <span class="number">6</span>      <span class="keyword">for</span> <span class="keyword">each</span> vertex v <span class="keyword">in</span> Graph:  <span class="comment">// Initialization</span>
 <span class="number">7</span>          <span class="keyword">if</span> v ≠ source            <span class="comment">// Where v has not yet been removed from Q (unvisited nodes)</span>
 <span class="number">8</span>              dist[v] ← infinity             <span class="comment">// Unknown distance function from source to v</span>
 <span class="number">9</span>              prev[v] ← undefined            <span class="comment">// Previous node in optimal path from source</span>
<span class="number">10</span>          <span class="keyword">end</span> <span class="keyword">if</span> 
<span class="number">11</span>          <span class="keyword">add</span> v <span class="keyword">to</span> Q                     <span class="comment">// All nodes initially in Q (unvisited nodes)</span>
<span class="number">12</span>      <span class="keyword">end</span> <span class="keyword">for</span>
<span class="number">13</span>      
<span class="number">14</span>      <span class="keyword">while</span> Q <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">empty</span>:
<span class="number">15</span>          u ← vertex <span class="keyword">in</span> Q <span class="keyword">with</span> min dist[u]  <span class="comment">// Source node in first case</span>
<span class="number">16</span>          <span class="keyword">remove</span> u <span class="keyword">from</span> Q 
<span class="number">17</span>          
<span class="number">18</span>          <span class="keyword">for</span> <span class="keyword">each</span> neighbor v <span class="keyword">of</span> u:           <span class="comment">// where v is still in Q.</span>
<span class="number">19</span>              alt ← dist[u] + length(u, v)
<span class="number">20</span>              <span class="keyword">if</span> alt &lt; dist[v]:               <span class="comment">// A shorter path to v has been found</span>
<span class="number">21</span>                  dist[v] ← alt 
<span class="number">22</span>                  prev[v] ← u 
<span class="number">23</span>              <span class="keyword">end</span> <span class="keyword">if</span>
<span class="number">24</span>          <span class="keyword">end</span> <span class="keyword">for</span>
<span class="number">25</span>      <span class="keyword">end</span> <span class="keyword">while</span>
<span class="number">26</span>
<span class="number">27</span>      return dist[], prev[]
<span class="number">28</span>
<span class="number">29</span>  <span class="keyword">end</span> <span class="function"><span class="keyword">function</span></span>
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dijkstra</span><span class="params">(g,src)</span>:</span></span><br><span class="line">    distance = &#123;&#125;</span><br><span class="line">    <span class="comment">#predecessor = &#123;&#125;</span></span><br><span class="line">    <span class="comment">#visited = []</span></span><br><span class="line">    unvisited = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> vertex <span class="keyword">in</span> g:</span><br><span class="line">        distance[vertex] = float(<span class="string">'inf'</span>)</span><br><span class="line">        unvisited[vertex] = distance[vertex]</span><br><span class="line"></span><br><span class="line">    distance[src] = <span class="number">0</span></span><br><span class="line">    unvisited[src] = <span class="number">0</span></span><br><span class="line">    <span class="comment">#predecessor[src] = None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> unvisited:</span><br><span class="line">        <span class="comment">#这里将 src 放在这个位置，而不是 unvisited.pop语句附近，是到最后的时候 unvisited 为空，从而会导致错误。</span></span><br><span class="line">        src = min(unvisited,key = unvisited.get)</span><br><span class="line">        <span class="keyword">for</span> neighbor <span class="keyword">in</span> g[src]:</span><br><span class="line">            <span class="keyword">if</span> neighbor <span class="keyword">not</span> <span class="keyword">in</span> visited:</span><br><span class="line">                new_distance = distance[src] + g[src][neighbor]</span><br><span class="line">                <span class="keyword">if</span> new_distance &lt; distance[neighbor]:</span><br><span class="line">                    distance[neighbor] = new_distance</span><br><span class="line">                    unvisited[neighbor] = new_distance</span><br><span class="line"></span><br><span class="line">        <span class="comment">#visited.append(src)</span></span><br><span class="line">        unvisited.pop(src)</span><br><span class="line">        predecessor[neighbor] = src</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> distance</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    mygraph = &#123;<span class="string">'s'</span>: &#123;<span class="string">'a'</span>: <span class="number">2</span>, <span class="string">'b'</span>: <span class="number">1</span>&#125;,</span><br><span class="line">               <span class="string">'a'</span>: &#123;<span class="string">'s'</span>: <span class="number">3</span>, <span class="string">'b'</span>: <span class="number">4</span>, <span class="string">'c'</span>: <span class="number">8</span>&#125;,</span><br><span class="line">               <span class="string">'b'</span>: &#123;<span class="string">'s'</span>: <span class="number">4</span>, <span class="string">'a'</span>: <span class="number">2</span>, <span class="string">'d'</span>: <span class="number">2</span>&#125;,</span><br><span class="line">               <span class="string">'c'</span>: &#123;<span class="string">'a'</span>: <span class="number">2</span>, <span class="string">'d'</span>: <span class="number">7</span>, <span class="string">'t'</span>: <span class="number">4</span>&#125;,</span><br><span class="line">               <span class="string">'d'</span>: &#123;<span class="string">'b'</span>: <span class="number">1</span>, <span class="string">'c'</span>: <span class="number">11</span>, <span class="string">'t'</span>: <span class="number">5</span>&#125;,</span><br><span class="line">               <span class="string">'t'</span>: &#123;<span class="string">'c'</span>: <span class="number">3</span>, <span class="string">'d'</span>: <span class="number">5</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line">    dist = dijkstra(mygraph,<span class="string">'s'</span>)</span><br><span class="line"></span><br><span class="line">    print(dist)</span><br></pre></td></tr></table></figure>
<p>wiki 里面有个用 priority queue 实现的，非常漂亮。不过我现在还没学 priority queue。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>输入图 G，初始点src<br>输出：初始点到所有点得最短路径</p>
<p>思路：<br>1.初始化，用字典表示，将所有点放入字典distance,distance[src] = 0,<br>其余点设为 inf 。<br>distance[v] 表示src 到 v 的当前]]>
    </summary>
    
      <category term="Graph" scheme="http://yoursite.com/tags/Graph/"/>
    
      <category term="algorithms" scheme="http://yoursite.com/tags/algorithms/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[binary search]]></title>
    <link href="http://yoursite.com/2015/04/27/binarysearch/"/>
    <id>http://yoursite.com/2015/04/27/binarysearch/</id>
    <published>2015-04-27T09:31:54.000Z</published>
    <updated>2015-04-27T10:07:13.000Z</updated>
    <content type="html"><![CDATA[<p>二分搜索看似简单，其实还是有点细节需要注意的。据说第一篇二分搜索的论文在1946年提出，但是第一个没有错误的实现要到1962年才出现（来自编程珠玑p34）。只有10%的程序员写对了。</p>
<p>二分搜索思想很简单，对于一个已经有序的序列 mylist，我们设 start = 0, end = len(mylist)-1.<br>我们找到序列中间的部分 mid, 如果要查找的值value正好就是 mid 位置的值就返回，否则，如果 value 小于序列中值，则在 start 到 mid-1 之间查找。反之，则查找 mid+1 到 end 部分。 （递归地查找）</p>
<p>需要注意的地方是什么时候程序结束。</p>
<p>由于每次查找，序列都会缩短一半，我们先看看最后剩3个元素的情况。<br>start mid end</p>
<p>这时候，如果 value 的值在 mylist[start] 和 mylist[mid]中间，这时，该搜索 start 和 mid-1 位置，也就是只剩1个元素了。<br>这个时候如果相等就返回 True，不相等就返回 False。</p>
<p>如果最后还剩4个元素：</p>
<p>start pos1 pos2 end</p>
<p>那么中间位置应该是 item1,所以我们只要考虑2个元素的情况了。</p>
<p>start end</p>
<p>此时的 mid=start</p>
<p>所以此时如果 value 小于 mylist[mid] 的话，只能返回 False 了。</p>
<p>总结：<br><strong> 1.如果只剩1个元素，即 start = end,直接比较然后返回结果 </strong><br><strong> 2.如果剩2个元素， 此时start = mid,如果 value 还是小于 mylist[mid]则返回 False </strong></p>
<p>我好像漏了没有考虑 value 大于 mylist[mid]的情况。其实如果大于的话，直接在 mid+1 和 end 位置找，就回到<br>$ mylist[mid+1] \leq value mylist[end] $ 的情况了。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bsearch</span><span class="params">(alist,value)</span>:</span></span><br><span class="line">    <span class="comment">#alist is sorted,increasing</span></span><br><span class="line">    <span class="keyword">if</span> value &lt; alist[<span class="number">0</span>] <span class="keyword">or</span> value &gt; alist[-<span class="number">1</span>]:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_bsearch</span><span class="params">(alist,value,start,end)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> start == end <span class="keyword">and</span> alist[start] != value:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        </span><br><span class="line">        mid = (start + end)//<span class="number">2</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> alist[mid] == value:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">elif</span> value &lt; alist[mid] :</span><br><span class="line">            <span class="keyword">if</span> start == mid:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> _bsearch(alist,value,start,mid-<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> _bsearch(alist,value,mid+<span class="number">1</span>,end)</span><br><span class="line">    <span class="keyword">return</span> _bsearch(alist,value,<span class="number">0</span>,len(alist))</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">#test</span></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> range(min(random_list),max(random_list)+<span class="number">1</span>):</span><br><span class="line">    result = bsearch(random_list,num)</span><br><span class="line">    num_in_list = num <span class="keyword">in</span> random_list</span><br><span class="line">    <span class="keyword">assert</span> result == num_in_list</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>二分搜索看似简单，其实还是有点细节需要注意的。据说第一篇二分搜索的论文在1946年提出，但是第一个没有错误的实现要到1962年才出现（来自编程珠玑p34）。只有10%的程序员写对了。</p>
<p>二分搜索思想很简单，对于一个已经有序的序列 mylist，我们设 start]]>
    </summary>
    
      <category term="algorithms" scheme="http://yoursite.com/tags/algorithms/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="search" scheme="http://yoursite.com/tags/search/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[kruskal]]></title>
    <link href="http://yoursite.com/2015/04/27/kruskal/"/>
    <id>http://yoursite.com/2015/04/27/kruskal/</id>
    <published>2015-04-27T04:20:47.000Z</published>
    <updated>2015-04-27T05:37:13.000Z</updated>
    <content type="html"><![CDATA[<p>kruskal 算法是一种贪心算法。基本思想是：<br>1.先把原图 G 的所有顶点(vertex)加到一个集合。把这些顶点看成一棵棵单独的树，每个树的根指向自身。<br>2.对G 的所有边进行从小到大排序。<br>3.把这些边一条条的加入新的集合。注意不要产生回路(环）。直到所有边处理完毕或者边的数目达到 V - 1</p>
<p>伪代码如下（来自 wiki）</p>
<pre><code>KRUSKAL(<span class="keyword">G</span>):
1 A = ∅
2 <span class="keyword">foreach</span> v ∈ <span class="keyword">G</span>.V:
3    MAKE-<span class="keyword">SET</span>(v)
4 <span class="keyword">foreach</span> (<span class="keyword">u</span>, v) ordered <span class="keyword">by</span> weight(<span class="keyword">u</span>, v), increasing:
5    <span class="keyword">if</span> FIND-<span class="keyword">SET</span>(<span class="keyword">u</span>) ≠ FIND-<span class="keyword">SET</span>(v):
6       A = A ∪ {(<span class="keyword">u</span>, v)}
7       UNION(<span class="keyword">u</span>, v)
8 <span class="keyword">return</span> A
</code></pre><table>
<thead>
<tr>
<th>Iamge</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><img src="figures/kruskal/400px-Kruskal_Algorithm_1.png" alt="1"></td>
<td><strong>AD</strong> and <strong>CE</strong> are the shortest edges, with length 5, and <strong>AD</strong> has been arbitrarily chosen, so it is highlighted.</td>
</tr>
<tr>
<td><img src="figures/kruskal/400px-Kruskal_Algorithm_2.png" alt="2"></td>
<td><strong>CE</strong> is now the shortest edge that does not form a cycle, with length 5, so it is highlighted as the second edge.</td>
</tr>
<tr>
<td><img src="figures/kruskal/400px-Kruskal_Algorithm_3.png" alt="3"></td>
<td>The next edge, <strong>DF</strong> with length 6, is highlighted using much the same method.</td>
</tr>
<tr>
<td><img src="figures/kruskal/400px-Kruskal_Algorithm_4.png" alt="4"></td>
<td>The next-shortest edges are <strong>AB</strong> and <strong>BE</strong>, both with length 7. <strong>AB</strong> is chosen arbitrarily, and is highlighted. The edge <strong>BD</strong> has been highlighted in red, because there already exists a path (in green) between <strong>B</strong> and <strong>D</strong>, so it would form a cycle (<strong>ABD</strong>) if it were chosen.</td>
</tr>
<tr>
<td><img src="figures/kruskal/400px-Kruskal_Algorithm_5.png" alt="5"></td>
<td>The process continues to highlight the next-smallest edge, <strong>BE</strong> with length 7. Many more edges are highlighted in red at this stage: <strong>BC</strong> because it would form the loop <strong>BCE</strong>, <strong>DE</strong> because it would form the loop <strong>DEBA</strong>, and <strong>FE</strong> because it would form <strong>FEBAD</strong>.</td>
</tr>
<tr>
<td><img src="figures/kruskal/400px-Kruskal_Algorithm_6.png" alt="6"></td>
<td>Finally, the process finishes with the edge <strong>EG</strong> of length 9, and the minimum spanning tree is found.</td>
</tr>
</tbody>
</table>
<p>这里面最引人入胜的是引入 disjoint set 来避免回路。注意到当加入边 e 时，如果 e 的2个邻接点在同一棵树中，那么必然产生回路。</p>
<p>所以我们在加入边的时候，要判断2个邻接点是不是在同一棵树中。如何判断呢？我们可以找出其根节点，如果2个节点的根节点相同，我们就不加入这条边。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DisjointSet</span><span class="params">(dict)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">##字典的 value存的是 root </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        self[item] = item</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        parent = self[item]</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">while</span> self[parent] != parent:</span><br><span class="line">            parent = self[parent]</span><br><span class="line"> </span><br><span class="line">        self[item] = parent</span><br><span class="line">        <span class="keyword">return</span> parent</span><br><span class="line">        </span><br><span class="line">    <span class="comment">#正常情况下，是应该找到 item1，item2的 root 的，但是在方法 kruskal 中，t1,t2</span></span><br><span class="line">    <span class="comment">#已经是 root 了，故不需要在找了</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">union</span><span class="params">(self, item1, item2)</span>:</span></span><br><span class="line">        self[item2] = self[item1]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">kruskal</span><span class="params">( nodes, edges )</span>:</span></span><br><span class="line">    forest = DisjointSet()</span><br><span class="line">    mst = []</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> nodes:</span><br><span class="line">        forest.add( n )</span><br><span class="line"> </span><br><span class="line">    sz = len(nodes) - <span class="number">1</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> sorted( edges, key=<span class="keyword">lambda</span> edge:edge[<span class="number">2</span>] ):</span><br><span class="line">        n1, n2, _ = e</span><br><span class="line">        t1 = forest.find(n1)</span><br><span class="line">        t2 = forest.find(n2)</span><br><span class="line">        <span class="keyword">if</span> t1 != t2:</span><br><span class="line">            mst.append(e)</span><br><span class="line">            sz -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> sz == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> mst</span><br><span class="line">         </span><br><span class="line">            forest.union(t1, t2)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">#test   </span></span><br><span class="line"> </span><br><span class="line">nodes = list( <span class="string">"ABCDEFG"</span> )</span><br><span class="line">edges = [ (<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="number">7</span>), (<span class="string">"A"</span>, <span class="string">"D"</span>, <span class="number">5</span>),</span><br><span class="line">          (<span class="string">"B"</span>, <span class="string">"C"</span>, <span class="number">8</span>), (<span class="string">"B"</span>, <span class="string">"D"</span>, <span class="number">9</span>), (<span class="string">"B"</span>, <span class="string">"E"</span>, <span class="number">7</span>),</span><br><span class="line">      (<span class="string">"C"</span>, <span class="string">"E"</span>, <span class="number">5</span>),</span><br><span class="line">      (<span class="string">"D"</span>, <span class="string">"E"</span>, <span class="number">15</span>), (<span class="string">"D"</span>, <span class="string">"F"</span>, <span class="number">6</span>),</span><br><span class="line">      (<span class="string">"E"</span>, <span class="string">"F"</span>, <span class="number">8</span>), (<span class="string">"E"</span>, <span class="string">"G"</span>, <span class="number">9</span>),</span><br><span class="line">      (<span class="string">"F"</span>, <span class="string">"G"</span>, <span class="number">11</span>)]</span><br><span class="line">         </span><br><span class="line"><span class="keyword">print</span> ( kruskal( nodes, edges ) )</span><br><span class="line"><span class="comment">#output: [('A', 'D', 5), ('C', 'E', 5), ('D', 'F', 6), ('A', 'B', 7), ('B', 'E', 7), ('E', 'G', 9)]</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>kruskal 算法是一种贪心算法。基本思想是：<br>1.先把原图 G 的所有顶点(vertex)加到一个集合。把这些顶点看成一棵棵单独的树，每个树的根指向自身。<br>2.对G 的所有边进行从小到大排序。<br>3.把这些边一条条的加入新的集合。注意不要产生回路(环）。]]>
    </summary>
    
      <category term="algorithms" scheme="http://yoursite.com/tags/algorithms/"/>
    
      <category term="graph" scheme="http://yoursite.com/tags/graph/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[DFS and BFS]]></title>
    <link href="http://yoursite.com/2015/04/24/binary_tree_traversal/"/>
    <id>http://yoursite.com/2015/04/24/binary_tree_traversal/</id>
    <published>2015-04-24T04:20:47.000Z</published>
    <updated>2015-04-27T05:10:01.000Z</updated>
    <content type="html"><![CDATA[<p>今天学习了树深度优先遍历和广度优先遍历，对我自己来说，还是邻接表 (adjacent List) 比较符合自己的思维。下面是算法用得图形</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> IPython.display <span class="keyword">import</span> Image</span><br><span class="line">Image(url=<span class="string">'http://glue.jjj.sun.ac.za/~james/IntroPython/images/binary.png'</span>)</span><br></pre></td></tr></table></figure>
<p><img src="http://glue.jjj.sun.ac.za/~james/IntroPython/images/binary.png"></p>
<p>这个图用邻接表表示就如程序中的 graph 变量。<br>这里巧妙地用了列表来存储节点。注意广度优先遍历和深度优先遍历只差一个：<br><strong>是先弹出(pop)最后一个还是第一个</strong>。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">graph=&#123; <span class="number">4</span>:[<span class="number">2</span>,<span class="number">6</span>], <span class="number">2</span>:[<span class="number">4</span>,<span class="number">1</span>,<span class="number">3</span>], <span class="number">6</span>:[<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>], <span class="number">3</span>:[<span class="number">2</span>], <span class="number">1</span>:[<span class="number">2</span>], <span class="number">5</span>:[<span class="number">6</span>], <span class="number">7</span>:[<span class="number">6</span>] &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(graph, start)</span>:</span></span><br><span class="line">    path = []</span><br><span class="line">    lst = [start]</span><br><span class="line">    <span class="keyword">while</span> lst:</span><br><span class="line">        vertex = lst.pop(-<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> vertex <span class="keyword">not</span> <span class="keyword">in</span> path:</span><br><span class="line">            path.append(vertex)</span><br><span class="line">            lst.extend(graph[vertex])</span><br><span class="line">    <span class="keyword">return</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> dfs(graph, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">[<span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#graph=&#123; 4:[2,6], 2:[4,1,3], 6:[4,5,7], 3:[2], 1:[2], 5:[6], 7:[6] &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bfs</span><span class="params">(graph, start)</span>:</span></span><br><span class="line">    path = []</span><br><span class="line">    queue = [start]</span><br><span class="line">    <span class="keyword">while</span> queue:</span><br><span class="line">        vertex = queue.pop(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">if</span> vertex <span class="keyword">not</span> <span class="keyword">in</span> path:</span><br><span class="line">            path.append(vertex)</span><br><span class="line">            queue.extend(graph[vertex])</span><br><span class="line">    <span class="keyword">return</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> bfs(graph, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">[<span class="number">4</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>]</span><br></pre></td></tr></table></figure>
<p>一开始我没有看明白，就一点一点来</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lst = [<span class="number">4</span>]</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lst</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">4</span>]</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lst.pop(-<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lst</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[]</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lst.extend([<span class="number">2</span>,<span class="number">6</span>])</span><br><span class="line"> lst</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">2</span>, <span class="number">6</span>]</span><br></pre></td></tr></table></figure>
<p>这里是关键了，如果一直是 pop(-1)，那么后加进来的就会被先弹出</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lst.pop(-<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lst</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">2</span>]</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lst.extend([<span class="number">5</span>,<span class="number">7</span>])</span><br><span class="line">lst</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">2</span>, <span class="number">5</span>, <span class="number">7</span>]</span><br></pre></td></tr></table></figure>
<p>到这里已经很清楚了，如果是弹出第一个，那么节点2会被先弹出，而不是7这样就是广度优先，如果先弹出最后一个节点，这里是7，就是深度优先。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天学习了树深度优先遍历和广度优先遍历，对我自己来说，还是邻接表 (adjacent List) 比较符合自己的思维。下面是算法用得图形</p>
<figure class="highlight python"><table><tr><td class="gutter"><]]>
    </summary>
    
      <category term="algorithms" scheme="http://yoursite.com/tags/algorithms/"/>
    
      <category term="graph" scheme="http://yoursite.com/tags/graph/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Mac 替换换行符]]></title>
    <link href="http://yoursite.com/2015/04/23/mac-ti-huan-huan-hang-fu-md/"/>
    <id>http://yoursite.com/2015/04/23/mac-ti-huan-huan-hang-fu-md/</id>
    <published>2015-04-23T12:40:19.000Z</published>
    <updated>2015-04-23T13:08:36.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Mac_替换换行符">Mac 替换换行符</h2><p>今天又学到一招，利用 sed 替换文本文件中某字符为换行符。</p>
<p>起因是这样，导师一个文本文件貌似损坏了，整个文件只有一行(可以这么说）。表现为：原来的 tab 分隔符变成了\x09，换行符变成了\x0a。</p>
<p>以前就知道这类替换可以用 sed 或者 awk 之类的工具做。但是因为一直比较（恐惧？/懒惰？）命令行，而且网上一搜一大把解决方案。也就没有认真学。而且 man 的帮助文档很不好阅读，您就多给几个例子不好么。</p>
<p>表现如下:<br><img src="figures/bad_code_text.png" alt="bad code"></p>
<p>需要转换如下</p>
<table>
<thead>
<tr>
<th>字段1</th>
<th>字段2</th>
<th>字段3</th>
<th>字段4</th>
<th>字段5</th>
<th>字段6</th>
<th>字段7</th>
<th>字段8</th>
<th>字段9</th>
</tr>
</thead>
<tbody>
<tr>
<td>2018</td>
<td>2011-10-03 00:00:00.000</td>
<td>10</td>
<td>10210</td>
<td>1</td>
<td>19435</td>
<td>2</td>
<td>61.5384</td>
<td>71.9999</td>
</tr>
<tr>
<td>2018</td>
<td>2011-10-03 00:00:00.000</td>
<td>10</td>
<td>11036</td>
<td>1</td>
<td>5971</td>
<td>7</td>
<td>130.3673</td>
<td>152.5297</td>
</tr>
<tr>
<td>2018</td>
<td>2011-10-03 00:00:00.000</td>
<td>10</td>
<td>11085</td>
<td>1</td>
<td>5971</td>
<td>31</td>
<td>302.5817</td>
<td>354.0206</td>
</tr>
</tbody>
</table>
<p>网上搜索解决方案</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"a,b,c,d"</span> |sed <span class="string">'s/,/\n/g'</span></span><br></pre></td></tr></table></figure>
<p>结果行不通，直接把逗号换成 n 了 结果如下：</p>
<p><img src="figures/bash_wrong_solution.png" alt="wrong_solution"></p>
<p>继续搜索加上 Mac 关键字<br>找到 <a href="http://superuser.com/questions/307165/newlines-in-sed-on-mac-os-x" target="_blank" rel="external">http://superuser.com/questions/307165/newlines-in-sed-on-mac-os-x</a></p>
<p>里面给出的解决方案是：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'foo bar'</span> | sed <span class="operator">-e</span> <span class="string">'s/ /\'</span>$<span class="string">'\n/g'</span></span><br></pre></td></tr></table></figure>
<p>问的人想知道 <code>\&#39;$&#39;\n/g&#39;</code> 什么意思，我不管，能用就好。</p>
<p>感慨：</p>
<ul>
<li>有空还是学学比较好，走出自己的舒适区。</li>
<li>最好有一本参考手册，例子很多的那种，在手边。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Mac_替换换行符">Mac 替换换行符</h2><p>今天又学到一招，利用 sed 替换文本文件中某字符为换行符。</p>
<p>起因是这样，导师一个文本文件貌似损坏了，整个文件只有一行(可以这么说）。表现为：原来的 tab 分隔符变成了\x09，换行符变成了\]]>
    </summary>
    
      <category term="sed" scheme="http://yoursite.com/tags/sed/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[prime_sieve]]></title>
    <link href="http://yoursite.com/2015/04/23/prime_sieve/"/>
    <id>http://yoursite.com/2015/04/23/prime_sieve/</id>
    <published>2015-04-23T06:00:01.000Z</published>
    <updated>2015-04-23T13:18:57.000Z</updated>
    <content type="html"><![CDATA[<h1 id="用筛法求N内素数和">用筛法求N内素数和</h1><p>起源于知乎上的一个问题，求10亿内的素数之和，什么方法最快？</p>
<p>下面给出的算法不是最快的，但是容易理解</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sieve6</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="string">"""Return an array of the primes below n."""</span></span><br><span class="line">    prime = numpy.ones(n, dtype=numpy.bool)</span><br><span class="line">    prime[:<span class="number">2</span>] = <span class="keyword">False</span></span><br><span class="line">    prime[<span class="number">4</span>::<span class="number">2</span>] = <span class="keyword">False</span></span><br><span class="line">    sqrt_n = int(n ** .<span class="number">5</span>) + <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> range(<span class="number">3</span>, sqrt_n, <span class="number">2</span>):</span><br><span class="line">        <span class="keyword">if</span> prime[p]:</span><br><span class="line">            prime[p*p::<span class="number">2</span>*p] = <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">return</span> prime.nonzero()[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>
<p>要点是：</p>
<ul>
<li>从3开始，到 $\sqrt{n}$ ,步长为2,这样就把偶数给省去了。</li>
<li>在筛的过程中，从 $p^2$ 开始，步长是$2p$，而且用数组，可以一步就设定这么多数值</li>
</ul>
<p>We could avoid allocating space for the even numbers, improving memory locality:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sieve7</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="string">"""Return an array of the primes below n."""</span></span><br><span class="line">    prime = numpy.ones(n // <span class="number">2</span>, dtype=numpy.bool)</span><br><span class="line">    sqrt_n = int(n ** .<span class="number">5</span>) + <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> range(<span class="number">3</span>, sqrt_n, <span class="number">2</span>):</span><br><span class="line">        <span class="keyword">if</span> prime[p // <span class="number">2</span>]:</span><br><span class="line">            prime[p*p // <span class="number">2</span>::p] = <span class="keyword">False</span></span><br><span class="line">    result = <span class="number">2</span> * prime.nonzero()[<span class="number">0</span>] + <span class="number">1</span></span><br><span class="line">    result[<span class="number">0</span>] = <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>
<p>最快的方法，还是 Robert William Hanks 的：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sieve8</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="string">"""Return an array of the primes below n."""</span></span><br><span class="line">    prime = numpy.ones(n//<span class="number">3</span> + (n%<span class="number">6</span>==<span class="number">2</span>), dtype=numpy.bool)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>, int(n**.<span class="number">5</span>) + <span class="number">1</span>, <span class="number">3</span>):</span><br><span class="line">        <span class="keyword">if</span> prime[i // <span class="number">3</span>]:</span><br><span class="line">            p = (i + <span class="number">1</span>) | <span class="number">1</span></span><br><span class="line">            prime[       p*p//<span class="number">3</span>     ::<span class="number">2</span>*p] = <span class="keyword">False</span></span><br><span class="line">            prime[p*(p-<span class="number">2</span>*(i&amp;<span class="number">1</span>)+<span class="number">4</span>)//<span class="number">3</span>::<span class="number">2</span>*p] = <span class="keyword">False</span></span><br><span class="line">    result = (<span class="number">3</span> * prime.nonzero()[<span class="number">0</span>] + <span class="number">1</span>) | <span class="number">1</span></span><br><span class="line">    result[<span class="number">0</span>] = <span class="number">3</span></span><br><span class="line">    <span class="keyword">return</span> numpy.r_[<span class="number">2</span>,result]</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="用筛法求N内素数和">用筛法求N内素数和</h1><p>起源于知乎上的一个问题，求10亿内的素数之和，什么方法最快？</p>
<p>下面给出的算法不是最快的，但是容易理解</p>
<figure class="highlight python"><table><t]]>
    </summary>
    
      <category term="prime" scheme="http://yoursite.com/tags/prime/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[python_note]]></title>
    <link href="http://yoursite.com/2015/04/23/python_note/"/>
    <id>http://yoursite.com/2015/04/23/python_note/</id>
    <published>2015-04-23T04:48:01.000Z</published>
    <updated>2015-04-24T07:22:58.000Z</updated>
    <content type="html"><![CDATA[<h1 id="python_笔记">python 笔记</h1><h2 id="day_1_基本语法">day 1 基本语法</h2><h2 id="day_2_高级语法">day 2 高级语法</h2><h3 id="decorator_装饰器">decorator 装饰器</h3><p>装饰器是一个特殊的函数，它接受函数为参数，同时在它自己的内部定义一个函数(我们叫它包装函数Wrapper），在包装函数中做一些动作，同时调用函数的参数，然后返回这个包装函数。看上去挺难懂，其实看代码就比较容易了。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_args</span><span class="params">(func,*args,**kargs)</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(func,*args,**kargs)</span>:</span></span><br><span class="line">		print(<span class="string">"function &#123;0&#125; and its args &#123;1&#125; and &#123;2&#125;"</span>.format(func,*args,**kargs))</span><br><span class="line">		func(*args,**kargs)</span><br><span class="line">		print(<span class="string">"goodbye"</span>)</span><br><span class="line">	<span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure>
<p>设想这样一个场景，我们自己写了很多函数</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x ** <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cubic</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x ** <span class="number">3</span></span><br></pre></td></tr></table></figure>
<p>但是这样的函数只能一个一个地算，不能接受列表作为参数的。我们当然不想一个函数一个函数得去改。<br>最好能加上个 listable 的功能就好了（类似 Mathematica 的 Listable Attribute)。</p>
<p>这个时候就轮到装饰器上场了。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">listable</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args)</span>:</span></span><br><span class="line">        arg_list = list(*args)</span><br><span class="line">        results = [func(arg) <span class="keyword">for</span> arg <span class="keyword">in</span> arg_list]</span><br><span class="line">        <span class="keyword">if</span> len(results) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> results[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> results</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure>
<p>然后，我们可以给我们自己写得函数加上这个装饰器，这样就可以处理列表参数啦</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="decorator">@listable</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x ** <span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>当然最让我震撼的是我看到下面的代码，它使用装饰器来缓存递归函数的值，可以让递归不用重复计算。<br>虽然可以改成迭代，但是递归代码往往更容易理解。而且，使用装饰器后，可以安心的写递归代码，其他都不用操心了。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">memoize</span><span class="params">(func)</span>:</span></span><br><span class="line">    func.cache = &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> args <span class="keyword">in</span> func.cache:</span><br><span class="line">            <span class="keyword">return</span> func.cache[args]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            func.cache[args] = func(*args)</span><br><span class="line">            <span class="keyword">return</span> func.cache[args]</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="decorator">@memoize</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fibonacci</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">"n must be positive integer"</span>)</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span> <span class="keyword">or</span> n == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>: <span class="keyword">return</span> fibonacci(n-<span class="number">1</span>)+fibonacci(n-<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<p>还有一个让我觉得牛逼的，就是 ipython notebook。 这家伙居然知道我用了缓存。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">%timeit fibonacci(<span class="number">10</span>)</span><br></pre></td></tr></table></figure>
<pre><code><span class="type">The</span> slowest run took <span class="number">50</span>.<span class="number">45</span> times longer than the fastest. <span class="type">This</span> could mean that an intermediate <span class="literal">result</span> <span class="keyword">is</span> being cached 
<span class="number">1000000</span> loops, best <span class="keyword">of</span> <span class="number">3</span>: <span class="number">276</span> ns per loop
</code></pre><h2 id="day_5_算法">day 5 算法</h2><h3 id="快排">快排</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quicksort</span><span class="params">(alist)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(alist)&lt;=<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> alist</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        pivot = alist.pop(np.random.randomint(len(alist)))</span><br><span class="line">        lesser = [item <span class="keyword">for</span> item <span class="keyword">in</span> alist <span class="keyword">if</span> item &lt; pivot]</span><br><span class="line">        greater = [item <span class="keyword">for</span> item <span class="keyword">in</span> alist <span class="keyword">if</span> item &gt;= pivot]</span><br><span class="line">    <span class="keyword">return</span> lesser + [pivot] + greater</span><br></pre></td></tr></table></figure>
<h3 id="二分搜索">二分搜索</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(sorted_list,element)</span>:</span></span><br><span class="line">    <span class="comment">#假定列表是升序排列</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bsearch</span><span class="params">(sorted_list,element,low,high)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> high == low:</span><br><span class="line">            <span class="keyword">return</span> element == sorted_list[high]</span><br><span class="line">        mid = (high + low)//<span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> sorted_list[mid] == element:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">elif</span> sorted_list[mid] &gt; element:</span><br><span class="line">            <span class="keyword">if</span> mid == low:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> bsearch(sorted_list,element,low,mid-<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> bsearch(sorted_list,element,mid+<span class="number">1</span>,high)</span><br><span class="line">        </span><br><span class="line">        Length = len(sorted_list)</span><br><span class="line">    <span class="keyword">if</span> Length == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> bsearch(sorted_list,element,<span class="number">0</span>,Length - <span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<h3 id="深度优先搜索(DFS)">深度优先搜索(DFS)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">graph = &#123;<span class="string">'A'</span>: set([<span class="string">'B'</span>, <span class="string">'C'</span>]),</span><br><span class="line">         <span class="string">'B'</span>: set([<span class="string">'A'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>]),</span><br><span class="line">         <span class="string">'C'</span>: set([<span class="string">'A'</span>, <span class="string">'F'</span>]),</span><br><span class="line">         <span class="string">'D'</span>: set([<span class="string">'B'</span>]),</span><br><span class="line">         <span class="string">'E'</span>: set([<span class="string">'B'</span>, <span class="string">'F'</span>]),</span><br><span class="line">         <span class="string">'F'</span>: set([<span class="string">'C'</span>, <span class="string">'E'</span>])&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(graph, start)</span>:</span></span><br><span class="line">    visited, stack = set(), [start]</span><br><span class="line">    <span class="keyword">while</span> stack:</span><br><span class="line">        vertex = stack.pop()</span><br><span class="line">        <span class="keyword">if</span> vertex <span class="keyword">not</span> <span class="keyword">in</span> visited:</span><br><span class="line">            visited.add(vertex)</span><br><span class="line">            stack.extend(graph[vertex] - visited)</span><br><span class="line">    <span class="keyword">return</span> visited</span><br><span class="line"></span><br><span class="line">dfs(graph, <span class="string">'A'</span>) <span class="comment"># &#123;'E', 'D', 'F', 'A', 'C', 'B'&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="python_笔记">python 笔记</h1><h2 id="day_1_基本语法">day 1 基本语法</h2><h2 id="day_2_高级语法">day 2 高级语法</h2><h3 id="decorator_装饰器">decorator 装饰器<]]>
    </summary>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
</feed>